{"version":3,"file":"997.37d5311388f097ab.js","mappings":"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","sources":["./src/paymentplans/confirm/confirm.component.ts","./src/paymentplans/confirm/confirm.html","./src/paymentplans/frame/frame.component.ts","./src/paymentplans/frame/frame.html","./src/paymentplans/grid/grid.component.ts","./src/paymentplans/grid/grid.html","./src/paymentplans/grid/planDetail.component.ts","./src/paymentplans/grid/planDetail.html","./src/paymentplans/landing/invoiceExample.component.ts","./src/paymentplans/landing/invoiceExample.html","./src/paymentplans/landing/landing.component.ts","./src/paymentplans/landing/landing.html","./src/paymentplans/module.ts","./src/paymentplans/paymentDetails/paymentDetails.component.ts","./src/paymentplans/paymentDetails/paymentDetails.html","./src/paymentplans/receipt/receipt.component.ts","./src/paymentplans/receipt/receipt.html","./src/paymentplans/selectPayment/selectPayment.component.ts","./src/paymentplans/selectPayment/selectPayment.html"],"sourcesContent":["import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { StateConfig } from 'common/interfaces';\r\nimport { BankAccountType, BillingType } from 'common/models';\r\nimport { GenericRepoService, ResponseErrorService } from 'common/services';\r\nimport * as moment from 'moment';\r\nimport { PaymentPlansStateNames } from '../constants';\r\nimport { FrameComponent } from '../frame/frame.component';\r\nimport { PaymentRequest, PaymentResponse } from '../interfaces';\r\nimport { PaymentPlanData, PlateDataService } from '../services';\r\nimport { WebApiService } from '../services/webApi.service';\r\n\r\n\r\ninterface ConfirmCmsContent {\r\n    reviewInfoHeader: string;\r\n    emailInstruction: string;\r\n    amountSelectionNoteTemplate: string;\r\n    paymentDetailsTitle: string;\r\n    paymentDateLabel: string;\r\n    paymentAmountLabel: string;\r\n    paymentDetailsHeader: string;\r\n\r\n    paymentPlanAmountLabel: string;\r\n    ezTagAmountLabel: string;\r\n    totalAmountLabel: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'confirm-component',\r\n    templateUrl: './confirm.html',\r\n    styleUrls: ['./confirm.less']\r\n})\r\nexport class ConfirmComponent implements OnInit {\r\n\r\n    //@host decorator was removed for parent due to issue with Ivy. see https://github.com/angular/angular/issues/31539\r\n    constructor(\r\n        private parent: FrameComponent,\r\n        private dataService: PlateDataService,\r\n        private state: StateService,\r\n        private responseErrorService: ResponseErrorService,\r\n        private paymentPlanApi: WebApiService,\r\n        private genericRepoService: GenericRepoService,\r\n        private stateNames: PaymentPlansStateNames\r\n    ) {\r\n        this.todayFormatted = this.formatDate(new Date());\r\n    }\r\n\r\n    public emailReceipt: string;\r\n    public todayFormatted: string;\r\n    public totalDue: number;\r\n\r\n    //bindings\r\n    @Input() cmsContent: ConfirmCmsContent;\r\n    @Input() isEzTagFlow: boolean;\r\n\r\n    public get planData(): PaymentPlanData {\r\n        return this.parent.planData;\r\n    }\r\n\r\n    public get cms(): ConfirmCmsContent {\r\n        return this.cmsContent;\r\n    }\r\n\r\n    public get isMaxPayment(): boolean {\r\n        return this.planData.paymentAmount === this.planData.selectedPaymentPlan.balanceAmount;\r\n    }\r\n\r\n    public get hasOverage(): boolean {\r\n        return this.planData.paymentAmount > this.planData.selectedPaymentPlan.nextInstallmentAmount;\r\n    }\r\n\r\n    public get paymentAmount(): number {\r\n        return this.planData.paymentAmount;\r\n    }\r\n\r\n    public get nextUpcomingInstallmentDateFormatted(): string {\r\n        return this.formatDate(this.planData.selectedPaymentPlan.nextUpcomingInstallmentDate);\r\n    }\r\n\r\n    formatDate = (date: string | Date): string => moment((date instanceof Date) ? date : new Date(date)).format('MMM Do, YYYY');\r\n\r\n    ngOnInit() {\r\n        this.parent.stepNum = 3;\r\n        this.parent.scrollToTop();\r\n\r\n        if (this.isEzTagFlow) {\r\n            this.genericRepoService\r\n                .dataFactory\r\n                .getPersonalInfo().then((response: any) => {\r\n                    this.emailReceipt = response.contactInfo.emailAddress;\r\n                });\r\n        }\r\n\r\n        this.totalDue = this.planData.paymentAmount + (this.planData.addAccountFunds ? this.planData.addAccountFundsAmount : 0);\r\n    }\r\n\r\n    public async makePayment(nextState: StateConfig) {\r\n        if (this.planData.billingMethod.billingType === BillingType.Eft) {\r\n            this.planData.billingMethod.eftPaymentMethod.name =\r\n                this.planData.billingMethod.eftPaymentMethod.name\r\n                || this.planData.billingMethod.eftPaymentMethod.nameOnBankAccount;\r\n\r\n            this.planData.billingMethod.eftPaymentMethod.nameOnBankAccount =\r\n                this.planData.billingMethod.eftPaymentMethod.nameOnBankAccount\r\n                || this.planData.billingMethod.eftPaymentMethod.name;\r\n        }\r\n\r\n        let accountDisplayType: string;\r\n        if (this.planData.billingMethod.eftPaymentMethod) {\r\n            accountDisplayType =\r\n                this.planData.billingMethod.eftPaymentMethod.accountType === BankAccountType.Personal\r\n                    ? 'Personal'\r\n                    : 'Business';\r\n        }\r\n        const paymentPlanRequest: PaymentRequest = {\r\n            eftPaymentMethod: Object.assign({},\r\n                this.planData.billingMethod.eftPaymentMethod,\r\n                {\r\n                    accountTypeDisplay: accountDisplayType\r\n                }),\r\n            creditCardPaymentMethod: this.planData.billingMethod.creditCardPaymentMethod,\r\n            creditCard: this.planData.billingMethod.billingType === BillingType.Credit,\r\n            paymentPlanId: this.planData.selectedPaymentPlan.paymentPlanId,\r\n            amount: this.planData.paymentAmount,\r\n            email: this.emailReceipt\r\n        };\r\n\r\n        if (this.isEzTagFlow) {\r\n            Object.assign(paymentPlanRequest, {\r\n                AccountPayment: this.planData.addAccountFunds,\r\n                AccountPaymentAmount: this.planData.addAccountFundsAmount\r\n            });\r\n        }\r\n\r\n        const response: PaymentResponse = await\r\n            (this.isEzTagFlow\r\n                ? this.paymentPlanApi.ezTagPayment(paymentPlanRequest)\r\n                : this.paymentPlanApi.violationsPayment(paymentPlanRequest));\r\n\r\n        if (!this.responseErrorService.isErrorFree(response)) {\r\n            return;\r\n        }\r\n\r\n        const paymentResponse = {\r\n            originalRequest: response.originalRequest,\r\n            currentBalanceObj: this.isEzTagFlow ? response.currentBalanceObj : null,\r\n            currentPaymentPlanBalanceObj: this.isEzTagFlow ? response.currentPaymentPlanBalanceObj : null\r\n        } as PaymentResponse;\r\n\r\n        this.dataService.setPaymentResponse(paymentResponse, this.isEzTagFlow);\r\n        this.dataService.setPlanDataInfo(this.planData, this.isEzTagFlow);\r\n\r\n        await this.state.go(nextState);\r\n    }\r\n\r\n}\r\n","<page-centered-container>\r\n    <form #ConfirmForm=\"ngForm\" validation-focus name=\"paymentPlanConfirmForm\">\r\n\r\n        <card-container>\r\n            <section fxLayout=\"column\">\r\n                <article>\r\n                    {{cmsContent.reviewInfoHeader}}\r\n                </article>\r\n            </section>\r\n\r\n            <section *ngIf=\"!isEzTagFlow\"\r\n                     fxLayout=\"column\"\r\n                     class=\"u-spacing__sectionToSection--marginTop\">\r\n                <header>\r\n                    <h2>{{cmsContent.paymentDetailsTitle}}</h2>\r\n                    <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                </header>\r\n                <div [innerHtml]=\"cmsContent.emailInstruction\"></div>\r\n\r\n                <!--Email-->\r\n                <section [error-check]=\"EmailAddressInput\" class=\"u-spacing--widthFill u-spacing__fieldToSection--marginTop\">\r\n                    <mat-label>EMAIL</mat-label>\r\n                    <input type=\"text\"\r\n                           id=\"emailAddress\"\r\n                           name=\"emailAddress\"\r\n                           #EmailAddressInput=\"ngModel\"\r\n                           [(ngModel)]=\"emailReceipt\"\r\n                           maxLength=\"80\"\r\n                           minLength=\"1\"\r\n                           placeholder=\"username@domain.com\"\r\n                           class=\"u-spacing--widthFill\"\r\n                           email />\r\n\r\n                    <div *ngFor=\"let error of EmailAddressInput.errors | keyvalue\" role=\"alert\">\r\n                        <ng-container *ngIf=\"ConfirmForm.submitted\" [ngSwitch]=\"error.key\">\r\n                            <p *ngSwitchCase=\"'email'\" class=\"help-block\">Please enter a valid email address</p>\r\n                            <p *ngSwitchCase=\"'maxLength'\" class=\"help-block\">Please enter a valid email address</p>\r\n                            <p *ngSwitchCase=\"'minLength'\" class=\"help-block\">Please enter a valid email address</p>\r\n                        </ng-container>\r\n                    </div>\r\n                </section>\r\n            </section>\r\n\r\n            <section fxLayout=\"column\"\r\n                     class=\"u-spacing__headerToSection--marginTop\">\r\n                <header>\r\n                    <div fxLayout=\"row\"\r\n                         fxLayoutAlign=\"start center\"\r\n                         class=\"u-spacing--widthFill\">\r\n                        <h2 fxFlex=\"grow\">{{cms.paymentDetailsHeader}}</h2>\r\n                        <a class=\"editButton\"\r\n                           (click)=\"Wizard.gotoPreviousState()\"\r\n                           fxFlex=\"none\"\r\n                           aria-label=\"Edit\">\r\n                            Edit\r\n                        </a>\r\n                    </div>\r\n                    <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                </header>\r\n\r\n                <payment-display [billingType]=\"planData.billingMethod.billingType\"\r\n                                 [bankDetails]=\"planData.billingMethod.eftPaymentMethod\"\r\n                                 [creditCard]=\"planData.billingMethod.creditCardPaymentMethod\"\r\n                                 [showAccountNumber]=\"true\"\r\n                                 [showLabels]=\"true\"\r\n                                 (edit)=\"Wizard.gotoPreviousState()\">\r\n                </payment-display>\r\n\r\n                <address-display [address]=\"planData.billingMethod.address\"\r\n                                 [international]=\"planData.billingMethod.address.international\"\r\n                                 [showLabels]=\"true\">\r\n                </address-display>\r\n            </section>\r\n\r\n            <row-container [rowType]=\"'emphasis'\"\r\n                           class=\"u-spacing__rowToSection--marginTop\">\r\n                <section col-start\r\n                         id=\"totalPaymentLabel\"\r\n                         fxFlex=\"grow\">\r\n                    {{cmsContent.paymentPlanAmountLabel}}\r\n                </section>\r\n\r\n                <section col-end\r\n                         id=\"totalPaymentValue\"\r\n                         fxFlex=\"none\">\r\n                    <currency [value]=\"planData.paymentAmount\"></currency>\r\n                </section>\r\n            </row-container>\r\n\r\n            <section fxLayout=\"row\"\r\n                     class=\"u-spacing__sectionToRow--marginTop\">\r\n                <article fxFlex=\"grow\">\r\n                    {{cmsContent.paymentDateLabel}}\r\n                </article>\r\n                <article fxFlex=\"none\">\r\n                    {{todayFormatted}}\r\n                </article>\r\n            </section>\r\n\r\n            <section *ngIf=\"hasOverage && !isMaxPayment\"\r\n                     class=\"noteBoxLayout u-spacing__sectionToSection--marginTop\">\r\n                <article>\r\n                    <cms-content [template]=\"cmsContent.amountSelectionNoteTemplate\"\r\n                                 [data]=\"{paymentAmount : paymentAmount , nextUpcomingInstallmentDateFormatted: nextUpcomingInstallmentDateFormatted}\"></cms-content>\r\n                </article>\r\n            </section>\r\n        </card-container>\r\n\r\n        <section fxLayout=\"column\"\r\n                 class=\"u-spacing__buttonToField--marginTop\">\r\n            <wizard-ui #Wizard\r\n                       (next)=\"makePayment($event)\">\r\n                <span wizard-next>SUBMIT PAYMENT</span>\r\n                <span wizard-cancel>Cancel</span>\r\n                <span wizard-previous\r\n                      fxLayout=\"row\"\r\n                      fxLayoutAlign=\"start center\">\r\n                    <mat-icon svgIcon=\"previous-arrow\"></mat-icon>\r\n                    Previous\r\n                </span>\r\n            </wizard-ui>\r\n        </section>\r\n\r\n    </form>\r\n</page-centered-container>\r\n","import { Component, Input, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { hideTrigger } from 'animations/hide';\r\nimport { wait } from 'common/utilities';\r\nimport { WindowRef } from 'common/providers';\r\nimport { StepperStep } from 'common/ui';\r\nimport { PlateDataService, PaymentPlanData, StateService } from '../services';\r\n\r\n\r\n\r\nimport {\r\n    IMailingInfo\r\n} from 'common/models';\r\n\r\ninterface FrameCmsData {\r\n    Title: string;\r\n    Step1: string;\r\n    Step2: string;\r\n    Step3: string;\r\n    Step4: string;\r\n}\r\n\r\n\r\n@Component({\n    selector: 'payment-plans-frame-component',\n    templateUrl: './frame.html',\n    styleUrls: ['./frame.less'],\r\n    animations: [hideTrigger]\n})\r\nexport class FrameComponent implements OnInit, OnDestroy {\r\n\r\n    constructor(\r\n        private paymentPlansStateService: StateService,\r\n        private plateDataService: PlateDataService,\r\n        @Inject(WindowRef) private windowRef: Window) {\r\n    }\r\n\r\n    public Title: string;\r\n    public planData: PaymentPlanData;\r\n\r\n    @Input() isEzTagFlow: boolean;\r\n    @Input() cmsBaseContent: FrameCmsData;\r\n\r\n    public steps: StepperStep[] = [];\r\n    public stepNum = 0;\r\n    public isHidden: boolean;\r\n\r\n    private eftMailingInfo = new Map<number, IMailingInfo>();\r\n\r\n    ngOnInit() {\r\n        this.isEzTagFlow = this.isEzTagFlow;\r\n        this.planData = this.plateDataService.getPlanDataInfo(this.isEzTagFlow);\r\n        this.Title = this.cmsBaseContent.Title;       \r\n\r\n        this.steps = [\r\n            { name: this.cmsBaseContent.Step1, background: 'primary' },\r\n            { name: this.cmsBaseContent.Step2, background: 'secondary' },\r\n            { name: this.cmsBaseContent.Step3, background: 'secondary' },\r\n            { name: this.cmsBaseContent.Step4 }\r\n        ];\r\n\r\n        const eftCachedAddressInfo = this.paymentPlansStateService.getCachedEftAddressInfo() || {};\r\n        this.eftMailingInfo.clear();\r\n        Object.keys(eftCachedAddressInfo).forEach(key => {\r\n            this.eftMailingInfo.set(+key, eftCachedAddressInfo[key]);\r\n        });        \r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.paymentPlansStateService.destroyPaymentPlansCurrentStep(this.isEzTagFlow);\r\n        this.eftMailingInfo.clear();\r\n    }\r\n\r\n    getCachedEftMailingInfo(accountBillingMethodId: number) {\r\n        return this.eftMailingInfo.get(accountBillingMethodId);\r\n    }\r\n\r\n    setCachedEftMailingInfo(accountBillingMethodId: number, mailingInfo: IMailingInfo) {\r\n        this.eftMailingInfo.set(accountBillingMethodId, mailingInfo);\r\n\r\n        const cache = [...this.eftMailingInfo.entries()]\r\n            .reduce((acc, v) => ({...acc, [v[0]]: v[1] }), {});\r\n\r\n        this.paymentPlansStateService.setCachedEftAddressInfo(cache);\r\n    }\r\n\r\n    public async scrollToTop() {\r\n        this.isHidden = true;\r\n\r\n        await wait(20);\r\n        this.windowRef.scrollTo(0, 0);\r\n\r\n        this.isHidden = false;\r\n    }\r\n}\r\n","<main class=\"refresh-2020\">\r\n    <title-banner>\r\n        {{cmsBaseContent.Title}}\r\n    </title-banner>\r\n\r\n    <stepper [steps]=\"steps\"\r\n             [currentStepNum]=\"stepNum\"></stepper>\r\n\r\n    <div [@hide]=\"isHidden\">\r\n        <ui-view></ui-view>\r\n    </div>\r\n</main>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { CmsUtilService } from 'cms/services';\r\nimport { ResponseErrorService } from 'common/services';\r\nimport { SpinnerService } from 'common/ui';\r\nimport { FrameComponent } from '../frame/frame.component';\r\nimport { CmsGridContent, PdfCmsContent, PlateSearchResponse } from '../interfaces';\r\nimport { PaymentPlanData, PaymentPlanInfo, PlateDataService, PlateInformation } from '../services';\r\nimport { WebApiService } from '../services/webApi.service';\r\n\r\n\r\n@Component({\r\n    selector: 'payment-plans-grid-component',\r\n    templateUrl: './grid.html',\r\n    styleUrls: ['./grid.less']\r\n})\r\nexport class GridComponent implements OnInit {\r\n\r\n    //@host decorator was removed for parent due to issue with Ivy. see https://github.com/angular/angular/issues/31539\r\n    constructor(\r\n        private parent: FrameComponent,\r\n        private dataService: PlateDataService,\r\n        private responseErrorService: ResponseErrorService,\r\n        private paymentPlanApi: WebApiService,\r\n        private cmsUtilService: CmsUtilService,\r\n        private spinnerService: SpinnerService\r\n    ) { }\r\n\r\n    // Bindings\r\n    @Input() isEzTagFlow: boolean;\r\n    @Input() cmsContent: any;\r\n\r\n    public cms: { pdf: PdfCmsContent; data: CmsGridContent };\r\n\r\n    get planData(): PaymentPlanData {\r\n        return this.parent.planData;\r\n    }\r\n\r\n    set planData(value: PaymentPlanData) {\r\n        this.parent.planData = value;\r\n    }\r\n\r\n    public activePlates: PlateInformation[] = [];\r\n    public inactivePlates: PlateInformation[] = [];\r\n\r\n    public hasCurrentSelectedPlan: boolean;\r\n\r\n    ngOnInit() {\r\n        this.parent.stepNum = 1;\r\n        this.parent.scrollToTop();\r\n\r\n        this.hasCurrentSelectedPlan = false;\r\n        const pdfContent = this.cmsContent.Children[4];\r\n        const infoIcon = this.cmsContent.Children[3];\r\n        const planText = this.cmsContent.Children[1];\r\n\r\n        this.cms = {\r\n            pdf: {\r\n                pdfDownloadText: pdfContent.ShortDescription,\r\n                pdfDownloadedMessage: pdfContent.pdfDownloaded,\r\n                pdfError: pdfContent.pdfError,\r\n                pdfProcessingMesssage: pdfContent.pdfProcessing\r\n            },\r\n            data: {\r\n                planActiveTitle: this.cmsContent.ShortDescription,\r\n                planInactiveTitle: this.cmsContent.LongDescription,\r\n\r\n                infoIcon: this.cmsUtilService.generateFileSrc(infoIcon.Image),\r\n\r\n                settlementAmmountText: planText.SettlementAmount,\r\n                paidAmmountText: planText.PaidAmount,\r\n                balanceDueText: planText.BalanceDue,\r\n                paymentPlanTerms: planText.LongDescription,\r\n                activePlanToolTipdecription: planText.ShortDescription,\r\n                defaultedTitle: this.cmsContent.Children[2].Title,\r\n\r\n                defaultedBody: this.cmsContent.Children[2].LongDescription,\r\n\r\n                balanceToolTip: null,\r\n                paymentPlanTermsLink: null,\r\n\r\n                paymentLateText: this.cmsContent.Children[0].LongDescription,\r\n                paymentLatePopup: this.cmsContent.Children[0]['passedDueTemplate']\r\n            }\r\n        };\r\n\r\n        if (this.isEzTagFlow) {\r\n            this.spinnerService.startSpinner();\r\n\r\n            this.paymentPlanApi.ezTagSearchPaymentPlans()\r\n                .then(this.processPaymentPlanSearch)\r\n                .then(this.processingPlans)\r\n                .catch(() => { });\r\n\r\n        } else {\r\n            this.spinnerService.stopSpinner();\r\n            this.processingPlans();\r\n        }\r\n    }\r\n\r\n    public processingPlans = () => {\r\n        //TODO: once ETC fix auto pay, need to seperate out the autopay/billingCard on account and new payment method.\r\n        this.dataService.resetPlanDataInfo(this.isEzTagFlow);\r\n        this.planData = this.dataService.getPlanDataInfo(this.isEzTagFlow);\r\n\r\n        this.activePlates = this.dataService.getActive(this.isEzTagFlow);\r\n        this.inactivePlates = this.dataService.getInactive(this.isEzTagFlow);\r\n\r\n        this.planData.selectedPaymentPlan = this.dataService.resetSelectedPlan(this.activePlates, this.inactivePlates, this.isEzTagFlow);\r\n        this.hasCurrentSelectedPlan = true;\r\n    };\r\n\r\n    public processPaymentPlanSearch = (response: PlateSearchResponse) => {\r\n        this.spinnerService.stopSpinner();\r\n\r\n        if (!this.responseErrorService.isErrorFree(response)) {\r\n            throw response;\r\n        }\r\n        this.dataService.setPaymentPlans(response, true);\r\n    };\r\n\r\n    public onClickGrid = (planId: number) => {\r\n        this.planData.selectedPaymentPlan =\r\n            this.dataService.toggleCurrentPlan(planId, this.activePlates, this.inactivePlates, this.isEzTagFlow);\r\n    };\r\n\r\n    public selectPlan = (selectedPlan: PaymentPlanInfo) => {\r\n\r\n        this.planData.selectedPaymentPlan = selectedPlan;\r\n\r\n        //reset the 'isSelected' prop\r\n        [...this.activePlates, ...this.inactivePlates]\r\n            .reduce((acc, plateInfo) => acc.concat(plateInfo.paymentPlans), [])\r\n            .forEach(plan => plan.isSelected = plan.paymentPlanId === selectedPlan.paymentPlanId);\r\n\r\n        //store current selected plan\r\n        this.dataService.storePlan(this.planData.selectedPaymentPlan, this.isEzTagFlow);\r\n    };\r\n}\r\n","<page-filled-container [hasGutter]=\"false\">\r\n    <main fxLayout=\"row\"\r\n          fxLayoutGap=\"30px\"\r\n          fxLayoutGap.lt-md=\"none\"\r\n          ngClass.lt-md=\"lt-md\">\r\n\r\n        <section fxFlex=\"445px\"\r\n                 fxFlex.lt-md=\"none\"\r\n                 ngClass.lt-md=\"u-spacing--widthFill\">\r\n            <ng-container *ngFor=\"let plate of activePlates; first as isFirst\">\r\n                <h3 [ngClass]=\"{ 'plate-spacing': !isFirst }\">\r\n                    {{cms.data.planActiveTitle}} <span translation-skip>{{plate.licPlateState}} {{plate.licPlateNumber}}</span>\r\n                </h3>\r\n                <plan-detail [isActive]=\"true\" [plate]=\"plate\"></plan-detail>\r\n            </ng-container>\r\n\r\n            <ng-container *ngFor=\"let plate of inactivePlates; first as isFirst\">\r\n                <h3 [ngClass]=\"{ 'plate-spacing': !isFirst }\">\r\n                    {{cms.data.planInactiveTitle}} <span translation-skip>{{plate.licPlateState}} {{plate.licPlateNumber}}</span>\r\n                </h3>\r\n                <plan-detail [isActive]=\"false\" [plate]=\"plate\"></plan-detail>\r\n            </ng-container>\r\n        </section>\r\n\r\n        <section fxFlex=\"grow\" fxHide.lt-md>\r\n            <payment-details *ngIf=\"planData.selectedPaymentPlan && hasCurrentSelectedPlan\"\r\n                             [details]=\"planData.selectedPaymentPlan\"\r\n                             [cmsContent]=\"cms\"\r\n                             [isEzTagFlow]=\"isEzTagFlow\">\r\n            </payment-details>\r\n        </section>\r\n\r\n    </main>\r\n</page-filled-container>\r\n","import { Component, Input, Inject, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\nimport { CmsIds } from '../constants';\r\n\r\nimport { GridComponent } from './grid.component';\r\nimport { CmsGridContent, PdfCmsContent } from '../interfaces';\r\nimport { PlateInformation, PaymentPlanInfo } from '../services';\r\n\r\nimport { DialogService, DialogContent, DateWithTimeZoneService, GenericRepoService } from 'common/services';\r\nimport { PaymentDetailsComponent, InjectedData } from '../paymentDetails/paymentDetails.component';\r\n\r\nimport { MediaObserver } from '@angular/flex-layout';\r\nimport { OperatingSystemSnifferService } from 'common/services';\r\n\r\n\r\n\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector: 'plan-detail',\r\n    templateUrl: './planDetail.html',\r\n    styleUrls: ['./planDetail.less'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PlanDetailComponent implements OnInit {\r\n\r\n    //@host decorator was removed for grid due to issue with Ivy. see https://github.com/angular/angular/issues/31539\r\n    constructor(\r\n        private grid: GridComponent,\r\n        private dateWithTimeZoneService: DateWithTimeZoneService,\r\n        private genericRepoService: GenericRepoService,\r\n        private cmsIds: CmsIds,\r\n        private operatingSystemSnifferService: OperatingSystemSnifferService,\r\n        private dialogService: DialogService,\r\n        private mediaObserver: MediaObserver\r\n    ) {\r\n\r\n    }\r\n        \r\n    public currentDate: string;\r\n    public dueDate: string;\r\n    \r\n    @Input() plate: PlateInformation;\r\n    @Input() isActive: boolean;\r\n\r\n    public get currentSelectedPlan(): PaymentPlanInfo {\r\n        return this.grid.planData.selectedPaymentPlan;\r\n    }\r\n\r\n    public get cms(): { pdf: PdfCmsContent; data: CmsGridContent } {\r\n        return this.grid.cms;\r\n    }\r\n\r\n    public get isEzTagFlow(): boolean {\r\n        return this.grid.isEzTagFlow;\r\n    }\r\n       \r\n\r\n    public alertContent: string;\r\n\r\n    public warningBoxFlag: boolean;\r\n\r\n    ngOnInit() {\r\n        this.warningBoxFlag = false;\r\n        this.setCurrentDate();\r\n        \r\n        const request = {\r\n            ItemId: this.cmsIds.DetailsAlert\r\n        };\r\n\r\n        this.genericRepoService.dataFactory.getCmsPageById(request).then(this.populateCmsContent);\r\n    }\r\n\r\n    public populateCmsContent = (response) => {\r\n        const parsedRes = JSON.parse(response.cmsResponse);\r\n        this.alertContent = parsedRes.ShortDescription;\r\n    };\r\n\r\n    public getCorrectTimeZoneTime = (time) => {\r\n        this.dueDate = this.dateWithTimeZoneService.withoutOffsetToCentral(time, 'MMM Do, YYYY z');\r\n        return this.dueDate;\r\n    };\r\n\r\n    public setCurrentDate = () => {\r\n        this.currentDate = moment().format('YYYY-MM-DD');\r\n    };\r\n\r\n    public isPassedDueDate = (currentDate, dueDate) => new Date(currentDate) > new Date(dueDate);\r\n\r\n    public onClickPlanDesktop = (plan: PaymentPlanInfo) => {\r\n        if (this.operatingSystemSnifferService.isDesktopOs()) {\r\n            this.grid.onClickGrid(plan.paymentPlanId);\r\n        }\r\n    };\r\n\r\n    public onClickPlanMobile = (plan: PaymentPlanInfo) => {\r\n        if (!this.operatingSystemSnifferService.isDesktopOs()) {\r\n            this.grid.onClickGrid(plan.paymentPlanId);\r\n        }\r\n    };\r\n\r\n    public get isFullsite(): boolean {\r\n        return this.operatingSystemSnifferService.isDesktopOs();\r\n    }\r\n\r\n    public isPassedDue(plan: PaymentPlanInfo): boolean {\r\n        return this.isPassedDueDate(this.currentDate, plan.nextInstallmentDate);\r\n    }\r\n\r\n    public infoIconText(plan: PaymentPlanInfo): string {\r\n\r\n        const isPlanPassedDue = this.isPassedDueDate(this.currentDate, plan.nextInstallmentDate);\r\n\r\n        if (plan.status === 'Open' && isPlanPassedDue) {\r\n            //late  \r\n            return this.cms.data.paymentLatePopup;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public setdeafultTooltip(): string {\r\n        return this.cms.data?.defaultedBody;\r\n    }\r\n\r\n    public updateToggleFlag(): void {\r\n        this.warningBoxFlag = !this.warningBoxFlag;\r\n        return;\r\n    }\r\n\r\n    public viewDetails = (plan: PaymentPlanInfo, mobileBreakpoint: string) => {\r\n\r\n        const isMobile = this.mediaObserver.isActive(mobileBreakpoint);\r\n\r\n        this.grid.selectPlan(plan);\r\n\r\n        if (isMobile && !this.warningBoxFlag) {\r\n            this.dialogService.openSliderFilled(PaymentDetailsComponent, {\r\n                details: plan,\r\n                cmsContent: this.cms,\r\n                isEzTagFlow: this.isEzTagFlow\r\n            } as InjectedData, {\r\n                title: 'Plan Details'\r\n            } as DialogContent);\r\n        }\r\n        else if (this.warningBoxFlag) {\r\n            this.updateToggleFlag();\r\n        }\r\n    };\r\n}\r\n","<section *ngFor=\"let plan of plate.paymentPlans\"\r\n         (click)=\"viewDetails(plan, 'lt-md')\"\r\n         [ngClass]=\"{'selectedPlan': currentSelectedPlan === plan}\"\r\n         ngClass.lt-md=\"lt-md\"\r\n         class=\"refresh-2020\"\r\n         fxLayout=\"row\"\r\n         fxLayoutAlign=\"start center\"\r\n         fxLayoutAlign.lt-md=\"space-between center\"\r\n         id=\"plan{{plan.paymentPlanId}}\">\r\n\r\n    <div fxLayout=\"column\">\r\n        <div>\r\n\r\n            <strong>Payment Plan Number: <span translation-skip>{{plan.paymentPlanId}}</span></strong>\r\n\r\n            <a [ngClass]=\"{'passedDue': isPassedDue(plan), 'defaulted': plan.status === 'Defaulted' }\" (click)=\"$event.stopPropagation();updateToggleFlag();\">\r\n\r\n                <mat-icon *ngIf=\"(plan.status === 'Open' && isPassedDue(plan)) || plan.status === 'Defaulted'\"\r\n                          svgIcon=\"alert\"></mat-icon>\r\n\r\n                <mat-icon *ngIf=\"plan.status === 'Closed'\"\r\n                          svgIcon=\"checkmark\"\r\n                          class=\"center-align\"></mat-icon>\r\n\r\n            </a>\r\n            <div>\r\n                <aside>\r\n                    <cms-content *ngIf=\"plan.status !== 'Defaulted' && infoIconText(plan)\" [template]=\"infoIconText(plan)\"\r\n                                 [data]=\"{'nextInstallmentAmount': plan.nextInstallmentAmount, 'formatedPassedDue': getCorrectTimeZoneTime(plan.nextInstallmentDate)}\">\r\n                    </cms-content>\r\n                    <div class=\"default-plan-tooltip\" *ngIf=\"plan.status === 'Defaulted'\" [innerHtml]=\"setdeafultTooltip() | safeHtml\"></div>\r\n                </aside>\r\n            </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"isActive\"\r\n             fxLayout=\"row wrap\">\r\n            <div fxFlex.lt-md=\"grow\">\r\n                <strong><currency [value]=\"plan.nextInstallmentAmount\"></currency></strong>\r\n                <span>&nbsp;due&nbsp;{{getCorrectTimeZoneTime(plan.nextInstallmentDate)}}</span>\r\n                <span fxHide.lt-md>&nbsp;|&nbsp;</span>\r\n            </div>\r\n            <div fxFlex=\"nogrow\">\r\n                <span>Bal:&nbsp;</span><strong><currency [value]=\"plan.balanceAmount\"></currency> </strong>\r\n            </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"plan.status === 'Closed'\">\r\n            <span>Closed: {{getCorrectTimeZoneTime(plan.nextInstallmentDate)}}</span>\r\n        </div>\r\n\r\n        <div *ngIf=\"plan.status === 'Defaulted'\">\r\n            <span>Defaulted</span>\r\n        </div>\r\n    </div>\r\n\r\n    <i fxHide fxShow.lt-md class=\"selectArrow\"></i>\r\n\r\n</section>\r\n\r\n","import { Component, } from '@angular/core';\r\n\r\nimport { SiteCoreItem } from 'cms/cms.module';\r\nimport { DialogRef } from 'common/services';\r\nimport { CmsUtilService } from 'cms/services';\r\n\r\nexport interface CmsInvoiceExampleData {\r\n    pageData: SiteCoreItem;\r\n    reverseOrder: boolean;\r\n}\r\n\r\ninterface SectionData {\r\n    message: string;\r\n    url: string;\r\n    order: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'paymentplan-invoice-example',\r\n    templateUrl: './invoiceExample.html',\r\n    styleUrls: ['./invoiceExample.less']\r\n})\r\nexport class InvoiceExampleComponent {\r\n\r\n    public header: string;\r\n    public sections: SectionData[];\r\n\r\n    constructor(\r\n        private dialogRef: DialogRef<CmsInvoiceExampleData>,\r\n        private cmsUtilityService: CmsUtilService\r\n    ) {\r\n        const pageData = dialogRef.data.pageData;\r\n        const reverseOrder = dialogRef.data.reverseOrder;\r\n        this.header = pageData.ShortDescription;\r\n\r\n        this.sections = pageData.Children.map(c => ({\r\n                message: c.ShortDescription,\r\n                url: cmsUtilityService.generateFileSrc(c.Image),\r\n                order: c['order']\r\n            })).sort((a, b) => (a.order - b.order) * (reverseOrder ? -1 : 1));\r\n    }\r\n}\r\n","\r\n<h2>{{header}}</h2>\r\n<mat-divider></mat-divider>\r\n\r\n<section *ngFor=\"let section of sections\">    \r\n    <h3>{{section.message}}</h3>\r\n    <img [src]=\"section.url\" />\r\n</section>\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { AuthenticationService } from 'authentication/authenticationService/authentication.service';\r\nimport { SiteCoreItem } from 'cms/cms.module';\r\nimport { StateConfig } from 'common/interfaces';\r\nimport { DialogService, ResponseErrorService } from 'common/services';\r\nimport { FrameComponent } from 'paymentplans/frame/frame.component';\r\nimport { PlateDataService } from 'paymentplans/services';\r\nimport { WebApiService } from 'paymentplans/services/webApi.service';\r\nimport { CmsInvoiceExampleData, InvoiceExampleComponent } from './invoiceExample.component';\r\nimport { WebStorageConst } from '../../constants/webstorage.constants';\r\nimport { IPlate } from '../../frp3/interfaces';\r\nimport { ENVIRON_CONFIG } from 'common/upgrades';\r\nimport { WebStorageService } from '../../common/services/webStorageService/webStorage.service';\r\n\r\n\r\ninterface LandingPagePopupContent {\r\n    Title: string;\r\n    PrimaryContent: string;\r\n    AcceptButton: string;\r\n    RejectButton: string;\r\n}\r\n\r\ninterface LandingPageContent {\r\n    ShortDescription: string;\r\n    LongDescription: string;\r\n}\r\n\r\ninterface CloseImageCMSData {\r\n    Image: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'payment-plans-landing-component',\r\n    templateUrl: './landing.html',\r\n    styleUrls: ['./landing.less']\r\n})\r\nexport class LandingComponent implements OnInit {\r\n\r\n    //@host decorator was removed for parent due to issue with Ivy. see https://github.com/angular/angular/issues/31539\r\n    constructor(\r\n        private parent: FrameComponent,\r\n        private authService: AuthenticationService,\r\n        private dataService: PlateDataService,\r\n        private responseErrorService: ResponseErrorService,\r\n        private paymentPlanApi: WebApiService,\r\n        private state: StateService,\r\n        private dialogService: DialogService,\r\n        private webStorage: WebStorageService,\r\n        private webStorageConst: WebStorageConst,\r\n        @Inject(ENVIRON_CONFIG) public environmentConfig\r\n    ) { }\r\n\r\n    //parent wraps\r\n    private get isEzTagFlow(): boolean {\r\n        return this.parent.isEzTagFlow;\r\n    }\r\n\r\n    public get Title(): string {\r\n        return this.cmsPage.ShortDescription;\r\n    }\r\n\r\n    public get Description(): string {\r\n        return this.cmsPage.LongDescription;\r\n    }\r\n\r\n    @Input() public selectedState: { stateCode: string };\r\n    @Input() public licensePlateNumber: string;\r\n    @Input() public paymentPlanId: string;\r\n    @Input() public invoiceNumber: string;\r\n\r\n    @Input() USstates: { stateCode: string }[];\r\n    @Input() cmsPopup: LandingPagePopupContent;\r\n    @Input() cmsPage: LandingPageContent;\r\n    @Input() closeImage: CloseImageCMSData;\r\n\r\n    @Input() cmsInvoiceExample: SiteCoreItem;\r\n\r\n    ngOnInit() {\r\n        this.parent.stepNum = 0;\r\n        this.parent.scrollToTop();\r\n\r\n        const plateData = this.webStorage.getValue(this.webStorageConst.vehicleSelected) as IPlate;\r\n\r\n        if (this.environmentConfig.isMergeMATandVioOn && plateData != null) {\r\n            this.licensePlateNumber = plateData.number ?? '';\r\n\r\n            const usState = plateData.state ?? '';\r\n\r\n            this.selectedState = usState ? this.USstates.find(x => x.stateCode === usState) : this.USstates.find(x => x.stateCode === 'TX');\r\n\r\n            this.webStorage.removeEntry(this.webStorageConst.vehicleSelected);\r\n        }\r\n        if (!this.environmentConfig.isMergeMATandVioOn || plateData === null) {\r\n            this.licensePlateNumber = '';\r\n            this.selectedState = this.USstates.find(x => x.stateCode === 'TX');\r\n        }\r\n\r\n        if (this.authService.isAuthenticated()) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    public async findViolations(nextState: StateConfig) {\r\n        const fullRequest = {\r\n            InvoiceNumber: this.invoiceNumber ? ('' + this.invoiceNumber) : null,\r\n            LicenseState: this.selectedState.stateCode,\r\n            LicensePlate: this.licensePlateNumber,\r\n            PaymentPlanId: this.paymentPlanId ? ('' + this.paymentPlanId) : null\r\n        };\r\n\r\n        const response = await this.paymentPlanApi.violationsPaymentPlansSearch(fullRequest);\r\n\r\n        if (!this.responseErrorService.isErrorFree(response)) {\r\n            return;\r\n        }\r\n\r\n        this.dataService.setPaymentPlans(response, this.isEzTagFlow);\r\n        await this.state.go(nextState);\r\n    }\r\n\r\n    //refresh\r\n    public openInvoiceExample(reverseOrder: boolean) {\r\n        this.dialogService.openSliderCentered(InvoiceExampleComponent, {\r\n            pageData: this.cmsInvoiceExample,\r\n            reverseOrder\r\n        } as CmsInvoiceExampleData);\r\n    }\r\n    \r\n}\r\n\r\n","<page-filled-container>\r\n\r\n    <section class=\"u-spacing__firstHeaderToTitle--marginTop\">\r\n        <header>\r\n            <h2>{{Title}}</h2>\r\n            <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n        </header>\r\n\r\n        <article>{{Description}}</article>\r\n\r\n        <form #LandingForm=\"ngForm\"\r\n              fxLayout=\"column\"\r\n              validation-focus novalidate\r\n              class=\"u-spacing__fieldToSection--marginTop\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutGap=\"20px\">\r\n\r\n                <section fxFlex=\"none\">\r\n                    <mat-label>STATE</mat-label>\r\n                    <mat-select translation-skip id=\"selectedState\"\r\n                                tabindex=\"1\"\r\n                                [(value)]=\"selectedState\"\r\n                                [disableOptionCentering]=\"true\">\r\n                        <mat-option *ngFor=\"let item of USstates\" [value]=\"item\">{{item.stateCode}}</mat-option>\r\n                    </mat-select>\r\n                </section>\r\n\r\n                <section [error-check]=\"licensePlateInput\"\r\n                         fxFlex=\"auto\"\r\n                         ngClass.gt-sm=\"plate-input-width\">\r\n                    <mat-label for=\"licensePlate\">LICENSE PLATE NUMBER</mat-label>\r\n                    <input [(ngModel)]=\"licensePlateNumber\" #licensePlateInput=\"ngModel\"\r\n                           type=\"text\"\r\n                           name=\"licensePlate\"\r\n                           pattern=\"^[a-zA-Z0-9]{1,10}$\"\r\n                           id=\"licensePlate\"\r\n                           tabindex=\"2\"\r\n                           maxlength=\"10\"\r\n                           required />\r\n                    <aside *ngFor=\"let error of licensePlateInput.errors | keyvalue\">\r\n                        <ng-container *ngIf=\"LandingForm.submitted\" [ngSwitch]=\"error.key\">\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'pattern'\">Please enter a valid license plate number</p>\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'required'\">Please enter a valid license plate number</p>\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'maxlength'\">Please enter a valid license plate number</p>\r\n                        </ng-container>\r\n                    </aside>\r\n                </section>\r\n\r\n            </div>\r\n\r\n\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"start start\"\r\n                 fxLayout.lt-md=\"column\"\r\n                 fxLayoutAlign.lt-md=\"start center\"\r\n                 class=\"u-spacing__fieldToField--marginTop\">\r\n\r\n                <section [error-check]=\"invoiceNumberInput\"\r\n                         fxFlex=\"grow 100%\"\r\n                         fxFlex.lt-md=\"auto\"\r\n                         ngClass.gt-sm=\"invoice-number-container\"\r\n                         ngClass.lt-md=\"u-spacing--widthFill\">\r\n                    <mat-label>INVOICE NUMBER</mat-label>\r\n                    <input type=\"text\"\r\n                           id=\"invoice\"\r\n                           [(ngModel)]=\"invoiceNumber\" #invoiceNumberInput=\"ngModel\"\r\n                           pattern=\"^[0-9]+$\"\r\n                           name=\"invoice\"\r\n                           tabindex=\"3\"\r\n                           [required]=\"!paymentPlanId\" />\r\n\r\n                    <aside *ngFor=\"let error of invoiceNumberInput.errors | keyvalue\">\r\n                        <ng-container *ngIf=\"LandingForm.submitted\" [ngSwitch]=\"error.key\">\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'pattern'\">Please enter a valid invoice number</p>\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'required'\">Please enter a valid invoice number</p>\r\n                        </ng-container>\r\n                    </aside>\r\n\r\n                    <div>\r\n                        <a id=\"findInvoiceLnk\" (click)=\"openInvoiceExample(true)\">Need help finding the information on your invoice?</a>\r\n                    </div>\r\n                </section>\r\n\r\n                <div class=\"or-separator\"\r\n                     ngClass.gt-sm=\"or-separator-spacing-desktop\"\r\n                     ngClass.lt-md=\"or-separator-spacing-mobile\"\r\n                     fxFlex=\"none\"\r\n                     fxFlex.lt-md=\"auto\">OR</div>\r\n\r\n                <section [error-check]=\"PaymentPlanNumberInput\"\r\n                         fxFlex=\"grow 100%\"\r\n                         fxFlex.lt-md=\"auto\"\r\n                         ngClass.gt-sm=\"payment-plan-number-container\"\r\n                         ngClass.lt-md=\"u-spacing--widthFill\">\r\n                    <mat-label for=\"invoice\">PAYMENT PLAN NUMBER</mat-label>\r\n                    <input type=\"text\"\r\n                           id=\"payPlanIdTxt\"\r\n                           [(ngModel)]=\"paymentPlanId\" #PaymentPlanNumberInput=\"ngModel\"\r\n                           pattern=\"^[0-9]{1,10}$\"\r\n                           name=\"paymentPlans\"\r\n                           tabindex=\"3\"\r\n                           [required]=\"!invoiceNumber\" />\r\n\r\n                    <aside class=\"error-messages\" *ngFor=\"let error of PaymentPlanNumberInput.errors | keyvalue\">\r\n                        <ng-container *ngIf=\"LandingForm.submitted\" [ngSwitch]=\"error.key\">\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'pattern'\">Please enter a valid payment plan number</p>\r\n                            <p class=\"help-block\" *ngSwitchCase=\"'required'\">Please enter a valid payment plan number</p>\r\n                        </ng-container>\r\n                    </aside>\r\n\r\n                    <div>\r\n                        <a (click)=\"openInvoiceExample(false)\">The Payment Plan Number was given upon creation of your Payment Plan</a>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n\r\n            <div class=\"u-spacing__buttonToField--marginTop\">\r\n                <wizard-ui [reverseOrder]=\"true\"\r\n                           (next)=\"findViolations($event)\">\r\n                    <span wizard-next>SEARCH PAYMENT PLANS</span>\r\n                </wizard-ui>\r\n            </div>\r\n\r\n        </form>\r\n    </section>\r\n\r\n</page-filled-container>\r\n","import { CommonModule, CurrencyPipe } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { UIRouterModule } from '@uirouter/angular';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule as HctraCommonModule } from 'common/module';\r\nimport { PipesModule } from 'pipes/module';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n//payment plan components\r\nimport { PaymentDetailsComponent } from './paymentDetails/paymentDetails.component';\r\nimport { FrameComponent } from './frame/frame.component';\r\nimport { LandingComponent } from './landing/landing.component';\r\nimport { GridComponent } from './grid/grid.component';\r\nimport { PlanDetailComponent } from './grid/planDetail.component';\r\nimport { SelectPaymentComponent } from './selectPayment/selectPayment.component';\r\nimport { ConfirmComponent } from './confirm/confirm.component';\r\nimport { ReceiptComponent } from './receipt/receipt.component';\r\n\r\nimport { InvoiceExampleComponent } from './landing/invoiceExample.component';\r\n\r\nimport { StorefrontModule } from 'storefront/module';\r\nimport { ValidationModule } from 'validation/module';\r\n\r\nimport { PlateDataService, StateService } from './services';\r\nimport { WebApiService } from './services/webApi.service';\r\n\r\n\r\nimport {\r\n    PaymentPlansStateNames, CmsIds, PaymentPlanRoutes, FeatureToggles,\r\n    stateNames, cmsIds, urlPaths, featureToggles    \r\n} from './constants';\r\n\r\nimport { HybridModule } from 'hybrid/module';\r\n\r\nimport { routes } from './routing';\r\nconst routesWithComponents = routes.map(route => {\r\n    const componentDictionary = {\r\n        [stateNames.Root]: FrameComponent,\r\n        [stateNames.Landing]: LandingComponent,\r\n        [stateNames.Grid]: GridComponent,\r\n        [stateNames.MakePayment]: SelectPaymentComponent,\r\n        [stateNames.Confirm]: ConfirmComponent,\r\n        [stateNames.Receipt]: ReceiptComponent,\r\n\r\n        [stateNames.AccountOverview]: FrameComponent,\r\n        [stateNames.AccountOverviewSummary]: GridComponent,\r\n        [stateNames.AccountOverviewSelectPayment]: SelectPaymentComponent,\r\n        [stateNames.AccountOverviewConfirm]: ConfirmComponent,\r\n        [stateNames.AccountOverviewReceipt]: ReceiptComponent\r\n    };\r\n\r\n    return {\r\n        ...route,\r\n        component: componentDictionary[route.name]\r\n    };\r\n});\r\n\r\n@NgModule({\r\n    declarations: [\r\n        PaymentDetailsComponent, FrameComponent, LandingComponent, GridComponent,\r\n        PlanDetailComponent, SelectPaymentComponent,\r\n        ConfirmComponent, ReceiptComponent, InvoiceExampleComponent\r\n    ],\r\n    imports: [\r\n        PipesModule, CommonModule,\r\n        UIRouterModule.forChild({ states: routesWithComponents }),\r\n        HctraCommonModule, StorefrontModule,\r\n        HybridModule,\r\n        ValidationModule,\r\n        FormsModule,\r\n        FlexLayoutModule,\r\n        MatSelectModule,\r\n        MatFormFieldModule, MatDividerModule,\r\n        MatIconModule\r\n    ],\r\n    providers: [\r\n        { provide: CurrencyPipe, useClass: CurrencyPipe },\r\n        { provide: StateService, useClass: StateService },\r\n        { provide: PaymentPlansStateNames, useValue: stateNames },\r\n        { provide: CmsIds, useValue: cmsIds },\r\n        { provide: PaymentPlanRoutes, useValue: urlPaths },\r\n        { provide: PlateDataService, useClass: PlateDataService },\r\n        { provide: FeatureToggles, useValue: featureToggles },\r\n        { provide: WebApiService, useClass: WebApiService }\r\n    ]\r\n})\r\nexport class PaymentPlansModule {\r\n}\r\n","import { Component, Input, Inject, Optional } from '@angular/core';\r\nimport { PaymentPlanInfo } from '../services';\r\nimport { PdfCmsContent, CmsGridContent } from '../interfaces';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { StateConfig } from 'common/interfaces';\r\nimport { DateWithTimeZoneService, DialogRef, DownloadService } from 'common/services';\r\n\r\nexport interface InjectedData {\r\n    details: PaymentPlanInfo;\r\n    cmsContent: { pdf: PdfCmsContent; data: CmsGridContent };\r\n    isEzTagFlow: boolean;\r\n}\r\n\r\ntype AutoPayData = {\r\n    autoPayFlag: boolean;\r\n    autoPayData: string;\r\n};\r\n\r\nimport { OperatingSystemSnifferService } from 'common/services';\r\n\r\n\r\n@Component({\r\n    selector: 'payment-details',\r\n    templateUrl: './paymentDetails.html',\r\n    styleUrls: ['./paymentDetails.less']\r\n})\r\nexport class PaymentDetailsComponent {\r\n\r\n    constructor(       \r\n        private dateWithTimeZoneService: DateWithTimeZoneService,\r\n        private operatingSystemSnifferService: OperatingSystemSnifferService,\r\n        private stateService: StateService,\r\n        @Optional() private dialogRef: DialogRef<InjectedData>,\r\n        private downloadService: DownloadService) {\r\n\r\n        if (dialogRef) {\r\n            this.details = dialogRef.data.details;\r\n            this.cmsContent = dialogRef.data.cmsContent;\r\n            this.isEzTagFlow = dialogRef.data.isEzTagFlow;\r\n        }\r\n    }\r\n    \r\n    @Input() details: PaymentPlanInfo;\r\n    @Input() cmsContent: { pdf: PdfCmsContent; data: CmsGridContent };\r\n    @Input() isEzTagFlow: boolean;\r\n    \r\n    public pdfProcessing = false;\r\n    public isDownloadingPdf: boolean;\r\n\r\n    public get autoPayInfo(): AutoPayData {\r\n        return this.checkAutoPay();\r\n    }\r\n\r\n    public get isFullsite(): boolean {\r\n        return this.operatingSystemSnifferService.isDesktopOs();\r\n    }\r\n\r\n    public get progress(): number {\r\n        return this.details ? Math.round(100 * (this.details.paidAmount / this.details.settlementAmount)) : 0;\r\n    }\r\n\r\n    public get isPastDue(): boolean {\r\n        if (!this.details || !this.details.nextInstallmentDate) {\r\n            return false;\r\n        }\r\n\r\n        const today = new Date();\r\n        const dueDate = new Date(this.details.nextInstallmentDate);\r\n\r\n        return new Date(today.getFullYear(), today.getMonth(), today.getDate()) > dueDate\r\n            && this.details.nextInstallmentAmount > 0;\r\n    }\r\n\r\n    public get formattedDueDate(): string {\r\n        if (this.details && this.details.status === 'Closed') {\r\n            return 'None';\r\n        }\r\n        \r\n        if (!this.details || !this.details.nextInstallmentDate) {\r\n            return 'None';\r\n        }\r\n\r\n        const formattedDate = this.dateWithTimeZoneService.withoutOffsetToCentral(this.details.nextInstallmentDate, 'MMM Do, YYYY z');\r\n        if (formattedDate === 'Invalid date') {\r\n            return 'None';\r\n        }\r\n        return formattedDate;\r\n    }\r\n\r\n    public downloadPdf = () => {\r\n\r\n        const url = this.isEzTagFlow ? 'api/sessions/Pdf/GetPaymentPlanAccountPdf' : 'api/sessions/Pdf/GetPaymentPlanPdf';\r\n           \r\n        this.downloadService.download(url, true,\r\n            {\r\n                paymentPlanId: this.details.paymentPlanId\r\n            },\r\n            {\r\n                busy: this.cmsContent.pdf.pdfProcessingMesssage,\r\n                failure: this.cmsContent.pdf.pdfError,\r\n                success: this.cmsContent.pdf.pdfDownloadedMessage\r\n            }, 100000);\r\n        \r\n\r\n    };\r\n\r\n    public checkAutoPay(): AutoPayData {\r\n        if (this.details && this.details.billingMethod && this.details.billingMethod.creditCardPaymentMethod != null) {\r\n            return {\r\n                autoPayFlag: true,\r\n                autoPayData: '****' + this.details.billingMethod.creditCardPaymentMethod.cardNbr.slice(-4)\r\n            };\r\n        } else if (this.details && this.details.billingMethod && this.details.billingMethod.eftPaymentMethod != null) {\r\n            return {\r\n                autoPayFlag: true,\r\n                autoPayData: '****' + this.details.billingMethod.eftPaymentMethod.accountNumber.slice(-4)\r\n            };\r\n        }\r\n\r\n        return {\r\n                autoPayFlag: false,\r\n                autoPayData: ''\r\n            };\r\n    };\r\n\r\n    public continueWithPayment(nextState: StateConfig) {\r\n\r\n        this.stateService\r\n            .go(nextState)\r\n            .then(() => this.dialogRef && this.dialogRef.close());\r\n\r\n    }\r\n}\r\n","<main class=\"refresh-2020\" ngClass.lt-md=\"lt-md\">\r\n    <section fxLayout=\"row\"\r\n             fxLayoutAlign=\"center center\">\r\n        <h2 fxFlex fxShow fxHide.lt-md>\r\n            Plan: <span translation-skip>{{details.paymentPlanId}}</span>\r\n        </h2>\r\n        <h2 fxFlex fxHide fxShow.lt-md>\r\n            Payment Plan Number: <span translation-skip>{{details.paymentPlanId}}</span>\r\n        </h2>\r\n        <div fxShow fxHide.lt-md style=\"text-align: right\">\r\n            Agency: <span translation-skip>{{details.agency}}</span>\r\n        </div>\r\n    </section>\r\n\r\n    <ng-container *ngIf=\"details.status !== 'Defaulted' else defaulted\">\r\n\r\n        <section>\r\n            <h3>Plan Summary</h3>\r\n        </section>\r\n\r\n        <section fxHide fxShow.lt-md>\r\n            Agency: <span translation-skip>{{details.mobileAgency}}</span>\r\n        </section>\r\n\r\n        <section fxLayout=\"column\"\r\n                 [ngClass]=\"{'paymentPastDue' : isPastDue}\">\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutGap=\"14px\"\r\n                 fxLayout.lt-md=\"row wrap\"\r\n                 fxLayoutGap.lt-md=\"0px\">\r\n\r\n                <div fxFlex=\"0 0 160px\"\r\n                     fxFlex.lt-md=\"0 0 50%\"\r\n                     fxLayout=\"column\">\r\n                    <mat-label>Next installment:</mat-label>\r\n                    <strong>{{formattedDueDate}}</strong>\r\n                </div>\r\n                <div fxFlex=\"1 1 160px\"\r\n                     fxFlex.lt-md=\"0 0 50%\"\r\n                     fxLayout=\"column\"\r\n                     [ngStyle.lt-md]=\"{'text-align': 'right'}\">\r\n                    <mat-label>Installment amount:</mat-label>\r\n                    <strong><currency [value]=\"details.nextInstallmentAmount\"></currency></strong>\r\n                </div>\r\n                <div *ngIf=\"autoPayInfo.autoPayFlag\"\r\n                     fxFlex=\"1 1 100%\"\r\n                     fxFlex.lt-md=\"2 0 100%\"\r\n                     fxLayout=\"column\"\r\n                     [ngStyle]=\"{'text-align': 'right'}\"\r\n                     [ngStyle.lt-md]=\"{'text-align': 'left', 'padding-top': '16px'}\">\r\n                    <mat-label>AutoPay:</mat-label>\r\n                    <strong>{{autoPayInfo.autoPayData}}</strong>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div *ngIf=\"isPastDue\">\r\n                <article [innerHTML]=\"cmsContent.data.paymentLateText\"></article>\r\n            </div>\r\n        </section>\r\n\r\n        <section fxLayout=\"column\">\r\n            <h3 style=\"padding-bottom: 17px;\">Payment Progress</h3>\r\n            <div fxLayout=\"row\"\r\n                 fxLayoutAlign=\"end\">\r\n                <div fxFlex fxLayout=\"column\">\r\n                    <mat-label>\r\n                        <span [innerHTML]=\"cmsContent.data.settlementAmmountText \"></span>\r\n                    </mat-label>\r\n                    <strong><currency [value]=\"details.settlementAmount\"></currency></strong>\r\n                </div>\r\n                <div fxLayout=\"column\">\r\n                    <a>\r\n                        <mat-icon svgIcon=\"information\"></mat-icon>\r\n                        <mat-label [innerHTML]=\"cmsContent.data.balanceDueText \" style=\"padding-left: 4px; text-align: right\"></mat-label>\r\n                    </a>\r\n                    <div>\r\n                        <aside fxLayout=\"column\">\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\r\n                                <span [innerHTML]=\"cmsContent.data.settlementAmmountText \"></span>\r\n                                <span style=\"text-align: right\"><currency [value]=\"details.settlementAmount\"></currency></span>\r\n                            </div>\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\r\n                                <span [innerHTML]=\"cmsContent.data.paidAmmountText \"></span>\r\n                                <span style=\"text-align: right\">- <currency [value]=\"details.paidAmount\"></currency></span>\r\n                            </div>\r\n                            <hr />\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\r\n                                <strong [innerHTML]=\"cmsContent.data.balanceDueText \"></strong>\r\n                                <strong style=\"text-align: right\"><currency [value]=\"details.balanceAmount\"></currency></strong>\r\n                            </div>\r\n                        </aside>\r\n                    </div>\r\n                    <strong style=\"text-align: right\"><currency [value]=\"details.balanceAmount\"></currency></strong>\r\n                </div>\r\n            </div>\r\n            <progress-bar [color]=\"isPastDue && '#FC2125'\" [progress]=\"progress\"></progress-bar>\r\n        </section>\r\n\r\n        <div style=\"padding: 0 16px;\"\r\n             fxLayout=\"row\"\r\n             fxLayout.lt-md=\"column\"\r\n             fxLayoutAlign.gt-md=\"center center\">\r\n            <a fxFlex=\"grow\" [ngClass]=\"{ 'media-buttons-faded':pdfProcessing}\"\r\n               (click)=\"downloadPdf()\">\r\n                <img src=\"/Content/icons/pdf.gif\" style=\"vertical-align: text-top; padding-right: 8px;\" />{{cmsContent.pdf.pdfDownloadText}}\r\n            </a>\r\n\r\n            <div fxFlex=\"294px\"\r\n                 fxFlex.lt-md\r\n                 fxFlexOffset.lt-md=\"52px\">\r\n                <wizard-ui *ngIf=\"details.status === 'Open'\"\r\n                           (next)=\"continueWithPayment($event)\">\r\n                    <span wizard-next>MAKE A PAYMENT</span>\r\n                </wizard-ui>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </ng-container>\r\n</main>\r\n\r\n<ng-template #defaulted>\r\n\r\n    <section>\r\n        <h3 [innerHTML]=\"cmsContent.data.defaultedTitle\"></h3>\r\n    </section>\r\n\r\n    <section>\r\n        <cms-content [template]=\"cmsContent.data.defaultedBody\" [data]=\"details\"></cms-content>        \r\n    </section>\r\n\r\n    <div style=\"padding: 0 16px;\"\r\n         fxLayout=\"row\"\r\n         fxLayoutAlign=\"center center\">\r\n        <a fxFlex=\"grow\" [ngClass]=\"{ 'media-buttons-faded':pdfProcessing}\"\r\n           (click)=\"downloadPdf()\">\r\n            <img src=\"/Content/icons/pdf.gif\" style=\"vertical-align: text-top; padding-right: 8px;\" />{{cmsContent.pdf.pdfDownloadText}}\r\n        </a>\r\n    </div>\r\n\r\n</ng-template>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { StateConfig } from 'common/interfaces';\r\nimport { BillingType } from 'common/models';\r\nimport { DateWithTimeZoneService, ResponseErrorService } from 'common/services';\r\nimport * as moment from 'moment';\r\nimport { FrameComponent } from '../frame/frame.component';\r\nimport { PaymentResponse } from '../interfaces';\r\nimport { PaymentPlanData, PlateDataService } from '../services';\r\nimport { WebApiService } from '../services/webApi.service';\r\n\r\n\r\nexport interface ReceiptCmsContent {\r\n    Title: string;\r\n    LongDescription: string;\r\n    ShortDescription: string;\r\n    paymentAmount: string;\r\n    paymentDate: string;\r\n    paymentMethod: string;\r\n    amountEzTag: string;\r\n    totalAmount: string;\r\n    billingInfoHeader: string;\r\n    Children: any;\r\n}\r\n\r\n@Component({\r\n    selector: 'receipt-component',\r\n    templateUrl: './receipt.html',\r\n    styleUrls: ['./receipt.less']\r\n})\r\nexport class ReceiptComponent implements OnInit {\r\n\r\n    //@host decorator was removed for parent due to issue with Ivy. see https://github.com/angular/angular/issues/31539\r\n    constructor(\r\n        private parent: FrameComponent,\r\n        private state: StateService,\r\n        private paymentPlanApi: WebApiService,\r\n        private responseErrorService: ResponseErrorService,\r\n        private dataService: PlateDataService,\r\n        private dateWithTimeZoneService: DateWithTimeZoneService\r\n    ) {\r\n    }\r\n\r\n    @Input() cmsContent: ReceiptCmsContent;\r\n    @Input() isEzTagFlow: boolean;\r\n\r\n    public get cms(): ReceiptCmsContent {\r\n        return this.cmsContent;\r\n    }\r\n\r\n    public get planData(): PaymentPlanData {\r\n        return this.parent.planData;\r\n    }\r\n\r\n    public get paymentAmount(): number {\r\n        return this.planData.paymentAmount;\r\n    }\r\n\r\n    public leftoverAmount: number;\r\n    public nextUpcomingInstallmentDateFormatted: string;\r\n\r\n    public paymentDate: string;\r\n\r\n    public BillingType = BillingType;\r\n    public paymentType: string;\r\n    public paymentNumber: string;\r\n    public paymentName: string;\r\n    public paymentCreditOrEFT: string;\r\n    private paymentResponse: PaymentResponse;\r\n    public paymentPlanNumber: number;\r\n\r\n    public async backToPaymentPlans(nextState: StateConfig) {\r\n\r\n        const response =\r\n            await (this.isEzTagFlow\r\n                ? this.paymentPlanApi.ezTagSearchPaymentPlans()\r\n                : this.paymentPlanApi.violationsPaymentPlansSearch({\r\n                    InvoiceNumber: '' + (this.paymentResponse.originalRequest.invoiceNumber || ''),\r\n                    LicenseState: this.paymentResponse.originalRequest.licenseState,\r\n                    LicensePlate: this.paymentResponse.originalRequest.licensePlate,\r\n                    PaymentPlanId: '' + (this.paymentResponse.originalRequest.paymentPlanId || '')\r\n                }));\r\n\r\n        if (this.responseErrorService.isErrorFree(response)) {\r\n            this.dataService.setPaymentPlans(response, this.isEzTagFlow);\r\n            await this.state.go(nextState);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.parent.stepNum = 4;\r\n        this.parent.scrollToTop();\r\n\r\n        this.paymentResponse = this.dataService.getPaymentResponse(this.isEzTagFlow);\r\n        this.formatCurrentDate();\r\n\r\n        this.leftoverAmount = this.planData.selectedPaymentPlan.balanceAmount - this.planData.paymentAmount;\r\n        this.nextUpcomingInstallmentDateFormatted =\r\n            this.dateWithTimeZoneService.withoutOffsetToCentral(this.planData.selectedPaymentPlan.nextInstallmentDate, 'MMM Do, YYYY z');\r\n\r\n        this.paymentPlanNumber = this.planData.selectedPaymentPlan.paymentPlanId;\r\n    }\r\n\r\n    public formatCurrentDate = () => {\r\n        this.paymentDate = this.dateWithTimeZoneService.withoutOffsetToCentral(moment().format('YYYY-MM-DDTHH:mm:ss'), 'MMM D, YYYY h:mm:ss A z');\r\n    };\r\n\r\n    public get isMaxPayment(): boolean {\r\n        return this.planData.paymentAmount === this.planData.selectedPaymentPlan.balanceAmount;\r\n    }\r\n    public get hasOverage(): boolean {\r\n        return this.planData.paymentAmount > this.planData.selectedPaymentPlan.nextInstallmentAmount;\r\n    }\r\n\r\n    public print() {\r\n        window.print();\r\n    }\r\n}\r\n","<page-centered-container>\r\n    <div fxLayout=\"column\">\r\n\r\n        <card-container class=\"u-spacing__firstHeaderToTitle--marginTop\">\r\n            <section fxLayout=\"column\">\r\n                <header>\r\n                    <div fxLayout=\"row\"\r\n                         fxLayoutAlign=\"start center\"\r\n                         fxLayout.lt-md=\"column\"\r\n                         fxLayoutAlign.lt-md=\"start start\">\r\n                        <h2 fxFlex=\"grow\"\r\n                            fxFlexOrder=\"1\"\r\n                            fxFlexOrder.lt-md=\"2\">\r\n                            {{cmsContent.Title}}\r\n                        </h2>\r\n                        <div fxFlex=\"none\"\r\n                             fxFlexOrder=\"2\"\r\n                             fxFlexOrder.lt-md=\"1\"\r\n                             ngClass.lt-md=\"printContainer-extra-bottom-space\">\r\n                            <print-link id=\"printButton\"></print-link>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                </header>\r\n\r\n                <row-container [rowType]=\"'emphasis'\">\r\n                    <article col-start\r\n                             id=\"totalPaymentLabel\"\r\n                             fxFlex=\"grow\">\r\n                        {{cmsContent.paymentAmount}}\r\n                    </article>\r\n\r\n                    <article col-end\r\n                             id=\"totalPaymentValue\"\r\n                             fxFlex=\"none\">\r\n                        <currency [value]=\"paymentAmount\"></currency>\r\n                    </article>\r\n                </row-container>\r\n            </section>\r\n\r\n            <section class=\"u-spacing__sectionToRow--marginTop\">\r\n                <article>{{cmsContent.paymentDate}} {{paymentDate}}</article>\r\n            </section>\r\n\r\n            <section *ngIf=\"leftoverAmount === 0\"\r\n                     class=\"noteBoxLayout u-spacing__sectionToSection--marginTop\">\r\n                <article>\r\n                    <cms-content [template]=\"cmsContent.Children[0].ShortDescription\" [data]=\"{paymentPlanNumber : paymentPlanNumber}\"></cms-content>\r\n                </article>\r\n            </section>\r\n\r\n            <section [ngClass]=\"{ 'u-spacing__sectionToSection--marginTop': leftoverAmount !== 0, 'u-spacing__sectionToRow--marginTop': leftoverAmount === 0}\">\r\n                <article>\r\n                    <cms-content [template]=\"cmsContent.ShortDescription\" [data]=\"{leftoverAmount : leftoverAmount}\"></cms-content>\r\n                </article>\r\n            </section>\r\n\r\n\r\n            <section fxLayout=\"column\"\r\n                     class=\"u-spacing__headerToSection--marginTop\">\r\n                <header>\r\n                    <h2>{{cmsContent.billingInfoHeader}}</h2>\r\n                    <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                </header>\r\n\r\n                <payment-display *ngIf=\"planData.billingMethod && planData.billingMethod.billingType\"\r\n                                 [billingType]=\"planData.billingMethod.billingType\"\r\n                                 [bankDetails]=\"planData.billingMethod.eftPaymentMethod\"\r\n                                 [creditCard]=\"planData.billingMethod.creditCardPaymentMethod\"\r\n                                 [showAccountNumber]=\"true\">\r\n                </payment-display>\r\n\r\n                <address-display *ngIf=\"planData.billingMethod && planData.billingMethod.billingType\"\r\n                                 class=\"u-spacing__addressToPaymentDisplay--marginTop\"\r\n                                 [address]=\"planData.billingMethod.billingType === BillingType.Credit ? planData.billingMethod.creditCardPaymentMethod : planData.billingMethod.eftPaymentMethod\"\r\n                                 [international]=\"planData.billingMethod.billingType === BillingType.Credit ? planData.billingMethod.creditCardPaymentMethod.international : planData.billingMethod.eftPaymentMethod.international\"\r\n                                 [showLabels]=\"false\"\r\n                                 [showEdit]=\"false\">\r\n                </address-display>\r\n            </section>\r\n\r\n            <section *ngIf=\"hasOverage && !isMaxPayment\"\r\n                     class=\"noteBoxLayout u-spacing__sectionToSection--marginTop\">\r\n                <article>\r\n                    <cms-content [template]=\"cmsContent.LongDescription\" [data]=\"{paymentAmount : paymentAmount , nextUpcomingInstallmentDateFormatted: nextUpcomingInstallmentDateFormatted}\"></cms-content>\r\n                </article>\r\n            </section>\r\n\r\n            <section class=\"u-spacing__buttonToField--marginTop\">\r\n                <wizard-ui #Wizard\r\n                           [reverseOrder]=\"true\"\r\n                           (next)=\"backToPaymentPlans($event)\">\r\n                    <span wizard-next>BACK TO PAYMENT PLANS</span>\r\n                </wizard-ui>\r\n            </section>\r\n        </card-container>\r\n\r\n    </div>\r\n</page-centered-container>\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { collapseTrigger } from 'animations/collapse';\r\nimport { CreditCardTypeService } from 'common/billing';\r\nimport { BillingInfoUtilitiesService } from 'common/billing/billingInfoUtilities.service';\r\nimport { CountryConversionService } from 'common/conversions';\r\nimport { StateConfig } from 'common/interfaces';\r\nimport {\r\n    AddressInfo, BankDetails, BillingInfo, BillingType, Country, CreditCardDetails, State\r\n} from 'common/models';\r\nimport { DialogContent, DialogService, GenericRepoService, ResponseErrorService } from 'common/services';\r\nimport { NewBillingAddressInjectionValues, NewBillingAddressModalComponent } from 'common/ui';\r\nimport {\r\n    BillingModalComponent,\r\n    InjectionValues as BillingInjectionValues\r\n} from 'common/ui/modals/billingModal/billingModal.component';\r\nimport * as moment from 'moment';\r\nimport { FrameComponent } from '../frame/frame.component';\r\nimport { BillingMethod, PaymentPlanData, PlateDataService } from '../services';\r\n\r\n\r\ninterface PaymentMethodResponse {\r\n    creditCards: (CreditCardDetails & AddressInfo)[];\r\n    bankAccounts: BankDetails[];\r\n    address: AddressInfo;\r\n}\r\n\r\nexport interface CmsContent {\r\n    Title: string;\r\n    amountSelectionNoteTemplate: string;\r\n    ShortDescription: string;\r\n\r\n    selectPaymentMethod: string;\r\n    selectPaymentAmount: string;\r\n\r\n    ezTagAmountSelectionHeader: string;\r\n    appliedEzTagPaymentNote: string;\r\n    ezTagPaymentHeader: string;\r\n}\r\n\r\nexport enum PaymentOptions {\r\n    BalanceAmount = 'balanceAmount',\r\n    NextInstallmentAmount = 'nextInstallmentAmount',\r\n    OtherPaymentAmount = 'otherPaymentAmount'\r\n}\r\n\r\ntype BillingStruct = {\r\n    data: BillingMethod;\r\n    label: string;\r\n    stored?: boolean;\r\n    attached?: boolean;\r\n};\r\n\r\n@Component({\r\n    selector: 'select-payment',\r\n    templateUrl: './selectPayment.html',\r\n    styleUrls: ['./selectPayment.less'],\r\n    animations: [collapseTrigger]\r\n})\r\nexport class SelectPaymentComponent implements OnInit {\r\n\r\n    //@host decorator was removed for parent due to issue with Ivy. see https://github.com/angular/angular/issues/31539\r\n    constructor(\r\n        private parent: FrameComponent,\r\n        private dataService: PlateDataService,\r\n        private state: StateService,\r\n        private dialogService: DialogService,\r\n        private countryConversionService: CountryConversionService,\r\n        private billingInfoUtilitiesService: BillingInfoUtilitiesService,\r\n        private creditCardTypeService: CreditCardTypeService,\r\n        private genericRepoService: GenericRepoService,\r\n        private responseErrorService: ResponseErrorService\r\n    ) { }\r\n\r\n    public readonly PaymentOptions = PaymentOptions;\r\n\r\n    public get planData(): PaymentPlanData {\r\n        return this.parent.planData;\r\n    }\r\n\r\n    //binding\r\n    @Input() isEzTagFlow: boolean;\r\n    @Input() states: State[];\r\n    @Input() countries: Country[];\r\n    @Input() cmsContent: CmsContent;\r\n\r\n    public BillingType = BillingType;\r\n\r\n    public selectedPaymentAmount: PaymentOptions;\r\n    public selectedPaymentMethod: BillingStruct;\r\n    public readonly maxPaymentAmount: number = 10000;\r\n\r\n    public otherPaymentAmount: number;\r\n    public nextUpcomingInstallmentDateFormatted: string = null;\r\n    public addEzTagPayment = false;\r\n    public ezTagPaymentAmount = 0;\r\n    public paymentInfo: BillingStruct[] = [];\r\n    public cms: CmsContent;\r\n    public get host() {\r\n        return this;\r\n    }\r\n\r\n    public updateOtherAmount(option) {\r\n        if (option === PaymentOptions.BalanceAmount) {\r\n            this.otherPaymentAmount = this.planData.selectedPaymentPlan.balanceAmount;\r\n        }\r\n        else if (option === PaymentOptions.NextInstallmentAmount) {\r\n            this.otherPaymentAmount = this.planData.selectedPaymentPlan.nextInstallmentAmount;\r\n        }\r\n    }\r\n\r\n    public get minPaymentAmount(): number | undefined {\r\n        if (this.selectedPaymentAmount !== PaymentOptions.OtherPaymentAmount) {\r\n            return;\r\n        }\r\n        if (this.planData && this.planData.selectedPaymentPlan) {\r\n            const lessThanOneDollarPaymentAllowed =\r\n                this.planData.selectedPaymentPlan.balanceAmount < 1 ||\r\n                this.planData.selectedPaymentPlan.nextInstallmentAmount < 1;\r\n\r\n            return lessThanOneDollarPaymentAllowed ? 0.01 : 1.0;\r\n        }\r\n        return 1.0;\r\n    }\r\n\r\n    public updateDisplayText(element): void {\r\n        let factorNum = null;\r\n        if (element.target.value.match(/^\\d+(,\\d{3})*(\\.\\d{0,2})?$/)) {\r\n            factorNum = element.target.value.replace(/[,]/g, '');\r\n            this.otherPaymentAmount = factorNum;\r\n        }\r\n        else {\r\n            this.otherPaymentAmount = 0;\r\n            element.target.value = 0;\r\n        }\r\n    }\r\n\r\n    public updateAmount(isOtherAmountSelected?: boolean): void {\r\n        this.otherPaymentAmount = this.planData.selectedPaymentPlan.balanceAmount;\r\n        if (isOtherAmountSelected) {\r\n            (document.getElementById('otherAmountTxt') as HTMLInputElement).select();\r\n        }\r\n    }\r\n\r\n    public get paymentAmount() {\r\n\r\n        let amount = null;\r\n        if (this.selectedPaymentAmount === this.PaymentOptions.BalanceAmount\r\n            || this.selectedPaymentAmount === this.PaymentOptions.NextInstallmentAmount) {\r\n\r\n            amount = this.planData.selectedPaymentPlan[this.selectedPaymentAmount];\r\n\r\n        } else if (this.selectedPaymentAmount === this.PaymentOptions.OtherPaymentAmount) {\r\n\r\n            amount = this.otherPaymentAmount;\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    isWizardDisabled(formInvalid: boolean): boolean {\r\n        return this.selectedPaymentMethod === undefined || this.selectedPaymentMethod === null || formInvalid;\r\n    }\r\n\r\n    async ngOnInit() {\r\n        this.parent.stepNum = 2;\r\n        this.parent.scrollToTop();\r\n\r\n        this.cms = Object.assign({}, this.cmsContent, {\r\n            amountSelectionNoteTemplate: this.cmsContent.ShortDescription\r\n        });\r\n\r\n        await this.processingPaymentInfo();\r\n\r\n        if (this.planData.selectedPaymentPlan.nextUpcomingInstallmentDate) {\r\n            this.nextUpcomingInstallmentDateFormatted =\r\n                moment(this.planData.selectedPaymentPlan.nextUpcomingInstallmentDate).format('MMM Do, YYYY');\r\n        }\r\n\r\n        if (this.planData.paymentAmount) {\r\n            if (this.planData.paymentAmount === this.planData.selectedPaymentPlan.balanceAmount) {\r\n                this.selectedPaymentAmount = this.PaymentOptions.BalanceAmount;\r\n            } else if (this.planData.paymentAmount === this.planData.selectedPaymentPlan.nextInstallmentAmount) {\r\n                this.selectedPaymentAmount = this.PaymentOptions.NextInstallmentAmount;\r\n            } else {\r\n                this.selectedPaymentAmount = this.PaymentOptions.OtherPaymentAmount;\r\n            }\r\n            this.otherPaymentAmount = this.planData.paymentAmount;\r\n        } else {\r\n            this.selectedPaymentAmount = this.PaymentOptions.NextInstallmentAmount;\r\n            this.otherPaymentAmount = this.planData.selectedPaymentPlan.nextInstallmentAmount;\r\n        }\r\n    }\r\n\r\n    public async promptNewPaymentMethod() {\r\n        const currentMailingAddress = await this.getCurrentMailingAddress();\r\n        const billingInformation: BillingInfo = {\r\n            eft: {\r\n                accountType: null,\r\n                accountTypeDisplay: null,\r\n                name: null,\r\n                routingNumber: null,\r\n                accountNumber: null,\r\n                account2: null,\r\n                primary: null,\r\n                accountBillingMethodId: null,\r\n                nameOnBankAccount: null,\r\n                address1: null,\r\n                city: null,\r\n                state: null,\r\n                zip: null,\r\n                plus4: null,\r\n                country: 'USA',\r\n                displayCountry: 'USA',\r\n                international: false\r\n            },\r\n            credit: {\r\n                cardCode: null,\r\n                cardNbr: null,\r\n                expMonth: null,\r\n                expYear: null,\r\n                nameOnCard: null,\r\n                paypageRegistrationId: null,\r\n                omniToken: null,\r\n                primary: null,\r\n                isNewCard: null,\r\n                address1: null,\r\n                city: null,\r\n                state: null,\r\n                zip: null,\r\n                plus4: null,\r\n                country: 'USA',\r\n                displayCountry: 'USA',\r\n                international: false\r\n            }\r\n        };\r\n\r\n        const data: BillingInjectionValues = {\r\n            stateList: this.states,\r\n            countryList: this.countries,\r\n            billingType: null,\r\n            billingInformation\r\n        };\r\n        const dialogContent: DialogContent = {\r\n            title: 'Add a New Payment Method'\r\n        };\r\n\r\n        return this.dialogService.openSliderCentered(BillingModalComponent, data, dialogContent)\r\n            .then((result: BillingInjectionValues) => {\r\n                if (result) {\r\n\r\n                    const billingType = result.billingType as BillingType;\r\n                    const address =\r\n                        (billingType === BillingType.Credit)\r\n                            ? result.billingInformation.credit as AddressInfo || currentMailingAddress\r\n                            : result.billingInformation.eft as AddressInfo || currentMailingAddress;\r\n\r\n                    const newPaymentMethod = {\r\n                        data: {\r\n                            billingType,\r\n                            creditCardPaymentMethod: result.billingInformation.credit,\r\n                            eftPaymentMethod: result.billingInformation.eft,\r\n                            address\r\n                        } as BillingMethod,\r\n                        label: this.getLabel(result),\r\n                        stored: false,\r\n                        attached: false\r\n                    };\r\n\r\n                    this.paymentInfo.push(newPaymentMethod);\r\n                    this.selectedPaymentMethod = newPaymentMethod;\r\n                    if (!this.selectedPaymentAmount) {\r\n                        this.selectedPaymentAmount = this.PaymentOptions.NextInstallmentAmount;\r\n                    }\r\n                }\r\n                else {\r\n                    this.selectedPaymentMethod = null;\r\n                }\r\n            });\r\n    }\r\n\r\n    public async nextStep(nextState: StateConfig) {\r\n\r\n        const isEft = this.selectedPaymentMethod.data.billingType === BillingType.Eft;\r\n        const isStored = this.selectedPaymentMethod.stored;\r\n\r\n        if (isEft && isStored) {\r\n\r\n            const eft = this.selectedPaymentMethod.data.eftPaymentMethod;\r\n            const cachedAddress = this.parent.getCachedEftMailingInfo(eft.accountBillingMethodId);\r\n\r\n            const eftData = {\r\n                stateList: this.states,\r\n                countryList: this.countries,\r\n                isShowPersonalInfo: true,\r\n                addressTitle: 'EFT Billing Address',\r\n                mailingInfo: cachedAddress ? { ...cachedAddress } : {}\r\n                \r\n            } as NewBillingAddressInjectionValues;\r\n\r\n            const result = await this.dialogService.openSliderCentered(NewBillingAddressModalComponent, eftData, { title: 'EFT Billing Information' });\r\n            if (!result) {\r\n                return;\r\n            }\r\n\r\n            this.parent.setCachedEftMailingInfo(eft.accountBillingMethodId, result.mailingInfo);\r\n            const { firstName, lastName } = result.mailingInfo;\r\n            this.selectedPaymentMethod.data.eftPaymentMethod.nameOnBankAccount = `${firstName} ${lastName}`;\r\n            this.selectedPaymentMethod.data.address = result.mailingInfo;\r\n        }\r\n\r\n        this.planData.billingMethod = this.selectedPaymentMethod.data;\r\n        this.planData.paymentAmount = this.paymentAmount;\r\n\r\n        this.dataService.setBillingMethod(this.planData.billingMethod, this.planData.paymentAmount, this.isEzTagFlow);\r\n\r\n        //stuff below are no longer needed(for now)\r\n        this.planData.addAccountFunds = this.addEzTagPayment;\r\n        this.planData.addAccountFundsAmount =\r\n            this.addEzTagPayment ? this.ezTagPaymentAmount : 0;\r\n\r\n        await this.state.go(nextState);\r\n    }\r\n\r\n    public get hasOverage(): boolean {\r\n        if (this.selectedPaymentAmount === this.PaymentOptions.OtherPaymentAmount) {\r\n            return this.otherPaymentAmount > this.planData.selectedPaymentPlan.nextInstallmentAmount;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public get showNoteForOtherAmmount(): boolean {\r\n        return this.planData.selectedPaymentPlan.balanceAmount > this.planData.selectedPaymentPlan.nextInstallmentAmount;\r\n    }\r\n\r\n    private async processingPaymentInfo(): Promise<void> {\r\n        this.paymentInfo = [];\r\n\r\n        //Add stored payments\r\n        if (this.isEzTagFlow) {\r\n            const results = await this.genericRepoService.dataFactory.getAllPaymentMethods();\r\n\r\n            if (this.responseErrorService.isErrorFree(results)) {\r\n                this.paymentInfo = [\r\n                    ...(results.creditCards || []).map(cc => ({\r\n                        billingType: BillingType.Credit,\r\n                        creditCardPaymentMethod: cc,\r\n                        autoPay: false,\r\n                        eftPaymentMethod: null,\r\n                        address: results.address || (cc as AddressInfo),\r\n                        isInternational: ((results.address || (cc as AddressInfo)) || {} as AddressInfo).country !== 'USA'\r\n                    } as BillingMethod))\r\n                        .filter(card => (!card.creditCardPaymentMethod.isBlocked)),\r\n                    ...(results.bankAccounts || []).map(eft => ({\r\n                        billingType: BillingType.Eft,\r\n                        eftPaymentMethod: eft,\r\n                        autoPay: false,\r\n                        address: results.address,\r\n                        isInternational: (results.address || {} as AddressInfo).country !== 'USA'\r\n                    } as BillingMethod))\r\n                ].map(payment => ({\r\n                    data: payment, label: this.getLabel(payment), stored: true, attached: false\r\n                }));\r\n            }\r\n        }\r\n\r\n        //add billing method attached to the payment plan\r\n        if (this.planData.selectedPaymentPlan.billingMethod\r\n            && this.planData.selectedPaymentPlan.billingMethod.billingType) {\r\n            const paymentMethod = {\r\n                data: this.planData.selectedPaymentPlan.billingMethod,\r\n                label: this.getLabel(this.planData.selectedPaymentPlan.billingMethod),\r\n                stored: true,\r\n                attached: true\r\n            };\r\n\r\n            this.paymentInfo.push(paymentMethod);\r\n        }\r\n        \r\n\r\n        //match selected payment into stored list or\r\n        //add to payment options\r\n        if (this.planData.billingMethod && this.planData.billingMethod.billingType) {\r\n\r\n            const billingMethodId = this.planData.billingMethod.billingType === BillingType.Credit\r\n                ? this.planData.billingMethod.creditCardPaymentMethod.accountBillingMethodId\r\n                : this.planData.billingMethod.eftPaymentMethod.accountBillingMethodId;\r\n\r\n            let selection: BillingStruct;\r\n\r\n            if (billingMethodId) {\r\n                //a stored billing method was already chosen,\r\n                //find in list and set it as selected\r\n                const selector = this.planData.billingMethod.billingType === BillingType.Credit\r\n                    ? (x: BillingStruct) => x.data.creditCardPaymentMethod.accountBillingMethodId === billingMethodId\r\n                    : (x: BillingStruct) => x.data.eftPaymentMethod.accountBillingMethodId === billingMethodId;\r\n\r\n                selection = this.paymentInfo\r\n                    .filter(x => x.stored && x.data.billingType === this.planData.billingMethod.billingType)\r\n                    .find(selector);\r\n            }\r\n                        \r\n            if (selection) {\r\n                this.selectedPaymentMethod = selection;\r\n            } else {\r\n                this.selectedPaymentMethod = {\r\n                    attached: false,\r\n                    label: this.getLabel(this.planData.billingMethod),\r\n                    stored: false,\r\n                    data: this.planData.billingMethod\r\n                };\r\n                this.paymentInfo.push(this.selectedPaymentMethod);\r\n            }\r\n            \r\n        } else {\r\n            //use the attached method\r\n            this.selectedPaymentMethod = this.paymentInfo.find(x => x.attached);\r\n        }\r\n\r\n    }\r\n\r\n    private async getCurrentMailingAddress(): Promise<AddressInfo> {\r\n        const response = await this.genericRepoService.dataFactory.getPersonalInfo();\r\n\r\n        if (response.errors.length > 0 || !this.isEzTagFlow) {\r\n            return null;\r\n        }\r\n\r\n        const { mailingAddress } = response;\r\n        const { countryList } = mailingAddress;\r\n        let { country } = mailingAddress;\r\n\r\n        if (country && !this.countryConversionService.isValidCountryCode(countryList, country)) {\r\n            country = this.countryConversionService.countryNameToCode(countryList, country);\r\n        }\r\n\r\n        return {\r\n            ...mailingAddress,\r\n            country,\r\n            international: this.billingInfoUtilitiesService.isInternationalAddress(mailingAddress)\r\n        };\r\n    }\r\n\r\n    public getLabel = (data): string => {\r\n        if (data === null) {\r\n            return null;\r\n        }\r\n\r\n        if (data.billingType === BillingType.Credit) {\r\n            let card;\r\n            if (data.billingInformation) {\r\n                card = data.billingInformation.credit;\r\n            }\r\n            else {\r\n                card = data.creditCardPaymentMethod;\r\n            }\r\n            return `${this.creditCardTypeService.cardCodeToName(card.cardCode)} **** ${card.cardNbr.replace(/[*-]/g, '')}`;\r\n\r\n        } else if (data.billingType === BillingType.Eft) {\r\n\r\n            let eft;\r\n            if (data.billingInformation) {\r\n                eft = data.billingInformation.eft;\r\n            }\r\n            else {\r\n                eft = data.eftPaymentMethod;\r\n            }\r\n            const accountType = eft.accountType ? eft.accountType : eft.accountTypeDisplay;\r\n            return `${accountType} **** ${eft.accountNumber.slice(-4)}`;\r\n\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n}\r\n","<page-centered-container>\r\n    <form #Form=\"ngForm\" name=\"selectPaymentPlanPaymentMethod\" validation-focus novalidate>\r\n        \r\n        <card-container>\r\n            <section>\r\n                <header>\r\n                    <h2>{{cms.Title}}</h2>\r\n                    <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                </header>\r\n            </section>\r\n\r\n            <section>\r\n                <header>\r\n                    <h3>{{cms.selectPaymentMethod}}</h3>\r\n                </header>\r\n            </section>\r\n\r\n            <section class=\"selection-to-header-spacing\"\r\n                     style=\"justify-content: flex-start;\">\r\n                <section fxLayout=\"row\"\r\n                         fxLayoutAlign=\"start center\"\r\n                         class=\"stack-layout\"\r\n                         id=\"paymentMethodsLst\"\r\n                         *ngFor=\"let paymentMethod of paymentInfo; index as i\">\r\n                    <input type=\"radio\"\r\n                           id=\"paymentPlanPaymentMethod_{{i}}\"\r\n                           [(ngModel)]=\"selectedPaymentMethod\"\r\n                           name=\"paymentMethodSelection\"\r\n                           [value]=\"paymentMethod\"\r\n                           class=\"inputPosition\" />\r\n                    <label for=\"paymentPlanPaymentMethod_{{i}}\"\r\n                           class=\"u-spacing--widthFill\">\r\n                        <span class=\"spanReadjust\">{{paymentMethod.label}}</span>\r\n                        <span class=\"spanReadjust\" *ngIf=\"paymentMethod.data.autoPay\"> (AutoPay)</span>\r\n                    </label>\r\n                </section>\r\n\r\n                <section fxLayout=\"row\"\r\n                         fxLayoutAlign=\"start center\"\r\n                         class=\"stack-layout\">\r\n                    <input type=\"radio\"\r\n                           id=\"newPaymentRadioBtn\"\r\n                           name=\"paymentMethodSelection\"\r\n                           [(ngModel)]=\"selectedPaymentMethod\"\r\n                           value=\"\"\r\n                           (click)=\"promptNewPaymentMethod()\"\r\n                           class=\"inputPosition\" />\r\n                    <label for=\"newPaymentRadioBtn\"\r\n                           class=\"u-spacing--widthFill\">\r\n                        <span class=\"spanReadjust\">New payment method</span>\r\n                    </label>\r\n                </section>\r\n            </section>\r\n\r\n            <section *ngIf=\"selectedPaymentMethod\"\r\n                     class=\"u-spacing__sectionToSection--marginTop\">\r\n                <header>\r\n                    <h3>{{cms.selectPaymentAmount}}</h3>\r\n                </header>\r\n            </section>\r\n\r\n            <section *ngIf=\"selectedPaymentMethod\"\r\n                     class=\"selection-to-header-spacing\"\r\n                     style=\"justify-content: flex-start;\"\r\n                     [ngStyle.lt-md]=\"{'margin-bottom':'20px'}\">\r\n                <section fxLayout=\"row\"\r\n                         fxLayoutAlign=\"start center\"\r\n                         class=\"stack-layout\"\r\n                         id=\"installmentAmountRdo\"\r\n                         *ngIf=\"selectedPaymentMethod\">\r\n                    <input type=\"radio\"\r\n                           id=\"paymentPlanInstallationAmount\"\r\n                           name=\"paymentAmountSelection\"\r\n                           [(ngModel)]=\"selectedPaymentAmount\"\r\n                           [value]=\"PaymentOptions.NextInstallmentAmount\"\r\n                           (change)=\"updateAmount()\"\r\n                           class=\"inputPosition\" />\r\n                    <label class=\"boxSpread u-spacing--widthFill\"\r\n                           for=\"paymentPlanInstallationAmount\">\r\n                        <span class=\"spanReadjust\">Installment Amount</span>\r\n                        <strong class=\"spanReadjust\"><currency [value]=\"planData.selectedPaymentPlan.nextInstallmentAmount\"></currency></strong>\r\n                    </label>\r\n                </section>\r\n\r\n                <section fxLayout=\"row\"\r\n                         fxLayoutAlign=\"start center\"\r\n                         class=\"stack-layout\"\r\n                         *ngIf=\"selectedPaymentMethod\">\r\n                    <input type=\"radio\"\r\n                           id=\"paymentPlanRemainingAmount\"\r\n                           name=\"paymentAmountSelection\"\r\n                           [(ngModel)]=\"selectedPaymentAmount\"\r\n                           [value]=\"PaymentOptions.BalanceAmount\"\r\n                           (change)=\"updateAmount()\"\r\n                           class=\"inputPosition\" />\r\n                    <label class=\"boxSpread u-spacing--widthFill\" for=\"paymentPlanRemainingAmount\">\r\n                        <span class=\"spanReadjust\">Remaining Amount</span>\r\n                        <strong class=\"spanReadjust\"><currency [value]=\"planData.selectedPaymentPlan.balanceAmount\"></currency></strong>\r\n                    </label>\r\n                </section>\r\n\r\n                <ng-container *ngIf=\"selectedPaymentMethod\">\r\n\r\n                    <section fxLayout=\"row\"\r\n                             fxLayoutAlign=\"start center\"\r\n                             class=\"stack-layout\">\r\n                        <input type=\"radio\"\r\n                               id=\"paymentPlanOtherAmount\"\r\n                               name=\"paymentAmountSelection\"\r\n                               [(ngModel)]=\"selectedPaymentAmount\"\r\n                               [value]=\"PaymentOptions.OtherPaymentAmount\"\r\n                               (change)=\"updateAmount(true)\"\r\n                               class=\"inputPosition\" />\r\n                        <label fxLayout=\"row\"\r\n                               fxLayoutAlign=\"start center\"\r\n                               class=\"boxSpread staticOtherAmountPadding u-spacing--widthFill\"\r\n                               for=\"paymentPlanOtherAmount\"\r\n                               [error-check]=\"OtherInputAmount\">\r\n                            <span class=\"spanReadjust\" fxFlex=\"grow\">Other amount</span>\r\n                            <span class=\"form-text spanReadjust otherAmountMargin\" fxFlex=\"none\"\r\n                                  [ngStyle.lt-md]=\"{ 'margin-left': '0%' }\">\r\n                                <input #OtherInputAmount=\"ngModel\"\r\n                                       inputCurrency\r\n                                       type=\"text\"\r\n                                       id=\"otherAmountTxt\"\r\n                                       step=\"0.01\"\r\n                                       [min]=\"minPaymentAmount\"\r\n                                       [max]=\"planData.selectedPaymentPlan.balanceAmount\"\r\n                                       name=\"otherAmount\"\r\n                                       [value]=\"otherPaymentAmount | number: '1.2-2'\"\r\n                                       [ngModel]=\"otherPaymentAmount | number: '1.2-2'\"\r\n                                       (change)=\"updateDisplayText($event)\"\r\n                                       pattern=\"^\\d+(,\\d{3})*(\\.\\d{0,2})?$\"\r\n                                       [required]=\"selectedPaymentAmount === PaymentOptions.OtherPaymentAmount\"\r\n                                       class=\"otherAmountPadding\" />\r\n                            </span>\r\n                        </label>\r\n\r\n                    </section>\r\n                    <error-messages *ngIf=\"selectedPaymentAmount === PaymentOptions.OtherPaymentAmount\"\r\n                                    [errors]=\"OtherInputAmount.errors\"\r\n                                    [activeBeforeSubmit]=\"true\">\r\n                        <error-message rule=\"min\">Minimum payment amount must be more than <currency [value]=\"minPaymentAmount\"></currency></error-message>                        \r\n                        <error-message rule=\"max\">Amount may not exceed your balance amount of <currency [value]=\"planData.selectedPaymentPlan.balanceAmount\"></currency></error-message>\r\n                    </error-messages>\r\n                    \r\n                </ng-container>\r\n                \r\n\r\n            </section>\r\n\r\n            <section class=\"noteBoxLayout u-spacing__sectionToSection--marginTop\"\r\n                     [@collapse]=\"!hasOverage\"\r\n                     *ngIf=\"showNoteForOtherAmmount\">\r\n                <article fxLayout=\"column\">\r\n                    <cms-content id=\"otherNoteTxt\" [template]=\"cms.amountSelectionNoteTemplate\" [data]=\"{otherPaymentAmount  : otherPaymentAmount,  nextUpcomingInstallmentDateFormatted: nextUpcomingInstallmentDateFormatted}\"></cms-content>\r\n                </article>\r\n            </section>\r\n\r\n            <!--EFT ACH DISCLAIMER-->\r\n            <section *ngIf=\"selectedPaymentMethod && selectedPaymentMethod.data.billingType === BillingType.Eft\">\r\n                <eft-ach-disclaimer></eft-ach-disclaimer>\r\n            </section>\r\n        </card-container>\r\n\r\n        <section class=\"u-spacing__buttonToField--marginTop\">\r\n            <wizard-ui #Wizard\r\n                       (next)=\"nextStep($event)\"\r\n                       [disabled]=\"isWizardDisabled(Form.invalid)\">\r\n                <span wizard-next>CONTINUE</span>\r\n                <span wizard-cancel>Cancel</span>\r\n                <span wizard-previous\r\n                      fxLayout=\"row\"\r\n                      fxLayoutAlign=\"start center\">\r\n                    <mat-icon svgIcon=\"previous-arrow\"></mat-icon>\r\n                    Previous\r\n                </span>\r\n            </wizard-ui>\r\n        </section>\r\n\r\n    </form>\r\n</page-centered-container>\r\n"],"names":["BankAccountType","BillingType","moment","i0","ConfirmComponent","constructor","parent","dataService","state","responseErrorService","paymentPlanApi","genericRepoService","stateNames","date","Date","format","todayFormatted","formatDate","planData","cms","cmsContent","isMaxPayment","paymentAmount","selectedPaymentPlan","balanceAmount","hasOverage","nextInstallmentAmount","nextUpcomingInstallmentDateFormatted","nextUpcomingInstallmentDate","ngOnInit","stepNum","scrollToTop","isEzTagFlow","dataFactory","getPersonalInfo","then","response","emailReceipt","contactInfo","emailAddress","totalDue","addAccountFunds","addAccountFundsAmount","makePayment","nextState","billingMethod","billingType","Eft","eftPaymentMethod","name","nameOnBankAccount","accountDisplayType","accountType","Personal","paymentPlanRequest","Object","assign","accountTypeDisplay","creditCardPaymentMethod","creditCard","Credit","paymentPlanId","amount","email","AccountPayment","AccountPaymentAmount","ezTagPayment","violationsPayment","isErrorFree","paymentResponse","originalRequest","currentBalanceObj","currentPaymentPlanBalanceObj","setPaymentResponse","setPlanDataInfo","go","selectors","inputs","decls","vars","consts","template","_r3","ctx","hideTrigger","wait","WindowRef","FrameComponent","paymentPlansStateService","plateDataService","windowRef","Map","getPlanDataInfo","Title","cmsBaseContent","steps","Step1","background","Step2","Step3","Step4","eftCachedAddressInfo","getCachedEftAddressInfo","eftMailingInfo","clear","keys","forEach","key","set","ngOnDestroy","destroyPaymentPlansCurrentStep","getCachedEftMailingInfo","accountBillingMethodId","get","setCachedEftMailingInfo","mailingInfo","cache","entries","reduce","acc","v","setCachedEftAddressInfo","isHidden","scrollTo","InvoiceExampleComponent","ENVIRON_CONFIG","LandingComponent","authService","dialogService","webStorage","webStorageConst","environmentConfig","cmsPage","ShortDescription","Description","LongDescription","plateData","getValue","vehicleSelected","isMergeMATandVioOn","licensePlateNumber","number","_a","usState","_b","selectedState","USstates","find","x","stateCode","removeEntry","isAuthenticated","findViolations","fullRequest","InvoiceNumber","invoiceNumber","LicenseState","LicensePlate","PaymentPlanId","violationsPaymentPlansSearch","setPaymentPlans","openInvoiceExample","reverseOrder","openSliderCentered","pageData","cmsInvoiceExample","cmsPopup","closeImage","ctx_r1","ctx_r2","ReceiptComponent","dateWithTimeZoneService","paymentDate","withoutOffsetToCentral","backToPaymentPlans","ezTagSearchPaymentPlans","licenseState","licensePlate","getPaymentResponse","formatCurrentDate","leftoverAmount","nextInstallmentDate","paymentPlanNumber","print","window","collapseTrigger","NewBillingAddressModalComponent","BillingModalComponent","paymentMethod_r7","ctx_r17","ctx_r12","ctx_r20","ctx_r13","ctx_r25","ctx_r26","ctx_r14","PaymentOptions","SelectPaymentComponent","countryConversionService","billingInfoUtilitiesService","creditCardTypeService","data","card","billingInformation","credit","cardCodeToName","cardCode","cardNbr","replace","eft","accountNumber","slice","host","updateOtherAmount","option","BalanceAmount","otherPaymentAmount","NextInstallmentAmount","minPaymentAmount","selectedPaymentAmount","OtherPaymentAmount","lessThanOneDollarPaymentAllowed","updateDisplayText","element","factorNum","target","value","match","updateAmount","isOtherAmountSelected","document","getElementById","select","isWizardDisabled","formInvalid","selectedPaymentMethod","undefined","amountSelectionNoteTemplate","processingPaymentInfo","promptNewPaymentMethod","currentMailingAddress","getCurrentMailingAddress","routingNumber","account2","primary","address1","city","zip","plus4","country","displayCountry","international","expMonth","expYear","nameOnCard","paypageRegistrationId","omniToken","isNewCard","stateList","states","countryList","countries","dialogContent","title","result","address","newPaymentMethod","label","getLabel","stored","attached","paymentInfo","push","nextStep","isEft","isStored","cachedAddress","eftData","isShowPersonalInfo","addressTitle","firstName","lastName","setBillingMethod","addEzTagPayment","ezTagPaymentAmount","showNoteForOtherAmmount","results","getAllPaymentMethods","creditCards","map","cc","autoPay","isInternational","filter","isBlocked","bankAccounts","payment","paymentMethod","billingMethodId","selection","selector","errors","length","mailingAddress","isValidCountryCode","countryNameToCode","isInternationalAddress"],"sourceRoot":"webpack:///"}
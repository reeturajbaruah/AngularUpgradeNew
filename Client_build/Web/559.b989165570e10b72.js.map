{"version":3,"file":"559.b989165570e10b72.js","mappings":"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","sources":["./src/MFA/components/mfa-security-question/mfa-security-question.component.ts","./src/MFA/components/mfa-security-question/mfa-security-question.component.html","./src/MFA/components/mfa-verify-code/mfa-verify-code.component.ts","./src/MFA/components/mfa-verify-code/mfa-verify-code.component.html","./src/MFA/components/multi-factor-authentication.component.ts","./src/MFA/components/multi-factor-authentication.component.html","./src/MFA/multi-factor-authentication.module.ts","./src/MFA/multi-factor-authentication.routing.ts","./src/MFA/services/multi-factor-authentication.service.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { StateService, UIRouterGlobals } from '@uirouter/angular';\nimport { stateNames } from '../../../login/constants';\nimport { MultiFactorAuthenticationService } from 'MFA/services/multi-factor-authentication.service';\nimport { SecurityQuestionCMS } from 'MFA/multi-factor-authentication.model';\nimport { AuthenticationService } from 'authentication/authenticationService/authentication.service';\nimport { ResponseErrorService, ToasterService } from 'common/services';\nimport { ValidateSecurityAnsResponse } from '../../../2FA/interfaces';\n\n@Component({\n    selector: 'app-mfa-security-question',\n    templateUrl: './mfa-security-question.component.html',\n    styleUrls: ['./mfa-security-question.component.less']\n})\nexport class MfaSecurityQuestionComponent implements OnInit {\n    @Input() cmsData: SecurityQuestionCMS;\n    securityQuestion: string;\n    answer = '';\n    isShowPassword = false;\n\n    constructor(\n        private multiFactorAuthenticationService: MultiFactorAuthenticationService,\n        private uiRouterGlobals: UIRouterGlobals,\n        private state: StateService,\n        private authService: AuthenticationService,\n        private responseErrorService: ResponseErrorService,\n        private toast: ToasterService\n    ) { }\n\n    ngOnInit(): void {\n        this.multiFactorAuthenticationService.getSecurityQuestions().then((resp: any) => {\n            if (resp.errors.length === 0) {\n                const securityQuestionIndex = resp?.securityQuestions.findIndex((qus) => qus.securityQuestionID === this.uiRouterGlobals.params.securityQuestionID);\n                this.securityQuestion = resp?.securityQuestions[securityQuestionIndex]?.securityQuestion;\n            } else {\n                this.responseErrorService.displayErrorsFromResponse(resp);\n                this.responseErrorService.displayAlertsFromResponse(resp);\n            }\n        });\n    }\n\n    verify(): void {\n        this.multiFactorAuthenticationService.verifySecurityQuestionResponse(this.answer).then(async (resp: ValidateSecurityAnsResponse) => {\n            if (resp) {\n                if (resp.errors.length === 0) {\n                    await this.multiFactorAuthenticationService.authenticateUser();\n                    const loginApiResponse = this.uiRouterGlobals.params.loginApiResponse;\n                    await this.multiFactorAuthenticationService.handleRedirects(loginApiResponse);\n                    this.toast.show('Success', this.cmsData.Success_Msg_Text);\n                } else {\n                    this.responseErrorService.displayErrorsFromResponse(resp);\n                    this.responseErrorService.displayAlertsFromResponse(resp);\n                }\n            }\n        });\n    }\n\n    async cancel() {\n        await this.authService.logout();\n        await this.state.go(stateNames.Login);\n    }\n\n}\n","<main class=\"refresh-2020\">\n    <storefront-utility #storefront></storefront-utility>\n    <!--Large Page/Flow title-->\n    <title-banner>\n        {{cmsData.Title}}\n    </title-banner>\n    <page-centered-container>\n        <form #SecurityAnswerForm=\"ngForm\" validation-focus novalidate method=\"post\">\n            <div fxLayout=\"column\">\n                <card-container class=\"u-spacing__firstHeaderToTitle--marginTop\">\n                    <section fxLayout=\"column\">\n                        <header>\n                            <h2>\n                                {{cmsData.Multi_Factor_Authentication_Title_Text}}\n                            </h2>\n                            <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\n                        </header>\n                        <section>\n                            <div class=\"u-spacing__divider--marginTopBottom question-title\">\n                                <article [innerHtml]=\"cmsData.ShortDescription | safeHtml\"></article>\n                            </div>\n                            <section *ngIf=\"securityQuestion\" class=\"question-section\">\n                                <div class=\"u-spacing__divider--marginTopBottom\">\n                                    {{securityQuestion}}\n                                </div>\n                                <section>\n                                    <div fxLayout=\"column\" [error-check]=\"answerInput\"\n                                        class=\"u-spacing__fieldToField--marginTop\" ngClass=\"spanPosition\">\n                                        <mat-label for=\"answer\">{{cmsData.Input_Lable_Text}}</mat-label>\n                                        <input type=\"text\"\n                                            id=\"answerTxtBox\"\n                                            [(ngModel)]=\"answer\"\n                                            name=\"answer\"\n                                            tabindex=\"1\"\n                                            [type]=\"isShowPassword ? 'text' : 'password'\"\n                                            [ngClass]=\"isShowPassword ? 'pwd-hide' : 'pwd-show'\"\n                                            #answerInput=\"ngModel\"\n                                            pattern=\"^[a-zA-Z0-9]{1,20}$\"\n                                            required />\n\n                                        <show-hide-input-button [(showField)]=\"isShowPassword\"></show-hide-input-button>\n                                        <error-messages [errors]=\"answerInput.errors\">\n                                            <error-message rule=\"pattern\">{{cmsData.Input_Pattern_Msg}}</error-message>\n                                            <error-message rule=\"required\">{{cmsData.Input_Required_Msg}}</error-message>\n                                        </error-messages>\n                                    </div>\n                                </section>\n                            </section>\n                        </section>\n                    </section>\n                </card-container>\n            </div>\n            <!--Submit Button-->\n            <div class=\"u-spacing__buttonToField--marginTop\">\n                <action-buttons (main)=\"verify()\" (alt)=\"cancel()\">\n                    <span action-alt>Cancel</span>\n                    <span action-main>{{cmsData.Btn_Text}}</span>\n                </action-buttons>\n                <wizard-ui #wizardUi></wizard-ui>\n            </div>\n        </form>\n    </page-centered-container>\n</main>","import { Channel, VerifyCodeCMS } from '2FA/interfaces';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { UIRouterGlobals, StateService } from '@uirouter/angular';\nimport { CmsReplacementService } from 'cms/services';\nimport { mfaStateNames, source } from 'MFA/constant';\nimport { MultiFactorAuthenticationService } from '../../services/multi-factor-authentication.service';\n\n@Component({\n    selector: 'app-mfa-verify-code',\n    templateUrl: './mfa-verify-code.component.html',\n    styleUrls: ['./mfa-verify-code.component.less']\n})\nexport class MfaVerifyCodeComponent implements OnInit {\n\n    @Input() cmsData: VerifyCodeCMS;\n    isEmail: boolean;\n    source = source;\n\n    constructor(\n        private state: StateService,\n        private cmsReplacementService: CmsReplacementService,\n        public uiRouterGlobals: UIRouterGlobals,\n        private mfaService: MultiFactorAuthenticationService,\n    ) { }\n\n    ngOnInit() {\n        this.isEmail = this.uiRouterGlobals.params.channel === Channel.Email;\n        this.cmsData.EMAIL_DESC = this.cmsReplacementService.transformTemplate(this.cmsData.EMAIL_DESC, { email: this.uiRouterGlobals.params.email.maskedInfo });\n        this.cmsData.PHONE_DESC = this.cmsReplacementService.transformTemplate(this.cmsData.PHONE_DESC, { phoneNumber: this.uiRouterGlobals.params.phoneNumber.maskedInfo });\n    }\n\n    async verify() {\n        await this.mfaService.authenticateUser();\n        const loginApiResponse = this.uiRouterGlobals.params.loginApiResponse;\n        this.mfaService.handleRedirects(loginApiResponse);\n    }\n\n    async tryAnotherWay() {\n        await this.state.go(mfaStateNames.MultiFactorAuthentication, { custom: { isExplicitlyAllowedTransition: true } });\n    }\n\n}\n","<page-centered-container class=\"refresh-2020\">\n <enter-verification-code (verifyEmit)=\"verify()\" [cmsInfo]=\"cmsData\" [contactInfo]=\"uiRouterGlobals.params.email.value\"\n        [acctId]=\"uiRouterGlobals.params.acctId\" [source]=\"source\" [channel]=\"uiRouterGlobals.params.channel\"\n        [disableTryAnotherWay]=\"false\" [isRememberDevice]=\"true\"  (tryAnotherWayEmit)=\"tryAnotherWay()\"></enter-verification-code>\n   <card-container *ngIf=\"!isEmail\">\n        <article [innerHtml]=\"cmsData.LongDescription | safeHtml\"></article>\n    </card-container>\n\n    <card-container *ngIf=\"isEmail\">\n        <article [innerHtml]=\"cmsData.ShortDescription | safeHtml\"></article>\n    </card-container> \n</page-centered-container>\n","import { Component, Inject, Input, OnInit } from '@angular/core';\nimport { StateService, UIRouterGlobals } from '@uirouter/angular';\nimport { stateNames } from '../../login/constants';\nimport { emailKeys, mfaStateNames, MFATypes, phoneKeys, source } from 'MFA/constant';\nimport { MultiFactorAuthenticationService } from 'MFA/services/multi-factor-authentication.service';\nimport { GetAccountInformationResponse } from 'common/services';\nimport { AuthenticationService } from 'authentication/authenticationService/authentication.service';\nimport { WebStorageConst } from 'constants/webstorage.constants';\nimport { WindowRef } from 'common/providers';\nimport { Channel, TwoFactorAuthSendRequest } from '2FA/interfaces';\n\n@Component({\n  selector: 'app-multi-factor-authentication',\n  templateUrl: './multi-factor-authentication.component.html',\n  styleUrls: ['./multi-factor-authentication.component.less']\n})\nexport class MultiFactorAuthenticationComponent implements OnInit {\n  @Input() mfaPageContent: any;\n  selectedClass: string = MFATypes.TEXT;\n  selectedInfo: number;\n  accountInfo: GetAccountInformationResponse;\n  selectedItems = [];\n  noDataMsg = '';\n\n  constructor(\n    private multiFactorAuthenticationService: MultiFactorAuthenticationService,\n    private state: StateService,\n    private authService: AuthenticationService,\n    protected webStorageConst: WebStorageConst,\n    @Inject(WindowRef) private window: Window,\n    private uiRouterGlobals: UIRouterGlobals,\n  ) { }\n\n  ngOnInit(): void {\n    this.multiFactorAuthenticationService.getAccountInfo().then((resp) => {\n      this.accountInfo = resp;\n      this.selectionChange(this.selectedClass);\n    });\n  }\n\n  selectionChange(updatedSelection: string): void {\n    this.selectedClass = updatedSelection;\n    this.selectedItems = [];\n    if (updatedSelection === MFATypes.TEXT || updatedSelection === MFATypes.CALL) {\n      const phoneArray = phoneKeys;\n      this.formSelectedItem(phoneArray, updatedSelection);\n      this.noDataMsg = this.mfaPageContent?.Phone_Num_Length_Msg;\n    } else {\n      const emailArray = emailKeys;\n      this.formSelectedItem(emailArray, updatedSelection);\n      this.noDataMsg = this.mfaPageContent?.Email_Length_Msg;\n    }\n    this.selectedInfo = 0;\n  }\n\n  formSelectedItem(keys: string[], selection: string): void {\n    const contactInfo = this.accountInfo.contactInfo;\n    keys.forEach((key, i) => {\n      if (contactInfo[key]) {\n        this.selectedItems.push({\n          id: i,\n          label: key,\n          value: contactInfo[key],\n          maskedInfo: (selection === MFATypes.EMAIL) ? this.getEmailMaskedInfo(contactInfo[key]) : '***-***-' + contactInfo[key].slice(-4)\n        });\n      }\n    });\n  }\n\n  getEmailMaskedInfo(email: string): string {\n    const splittedMailArr = email.split('@');\n    const numberOfAsterisk = splittedMailArr[0].length - 3;\n    const asteriskString = '*'.repeat(numberOfAsterisk);\n    return splittedMailArr[0].slice(0, 3) + asteriskString + '@' + splittedMailArr[1];\n  }\n\n  receiveCodeChange(val) {\n    this.selectedInfo = val.id;\n  }\n\n  async verify() {\n    const payload: TwoFactorAuthSendRequest = {\n      to: this.selectedItems[this.selectedInfo].value,\n      language: this.window.localStorage[this.webStorageConst.selectedLanguage],\n      accountId: this.accountInfo.acctId,\n      source,\n      channel: (this.selectedClass === MFATypes.TEXT) ? Channel.Sms : (this.selectedClass === MFATypes.CALL) ? Channel.Phone : Channel.Email,\n    };\n    const res = await this.multiFactorAuthenticationService.sendCode(payload);\n     if (res) {\n      this.state.go(mfaStateNames.VerifyCode, {\n        phoneNumber: this.selectedItems[this.selectedInfo],\n        email: this.selectedItems[this.selectedInfo],\n        channel: payload.channel,\n        acctId: this.accountInfo.acctId,\n        loginApiResponse: this.uiRouterGlobals.params.loginApiResponse\n      }, { custom: { isExplicitlyAllowedTransition: true } });\n    }\n  }\n\n  async cancel() {\n    await this.authService.logout();\n    await this.state.go(stateNames.Login);\n  }\n\n  async tryAnotherVerification() {\n    await this.state.go(mfaStateNames.SecurityQuestion, {\n      securityQuestionID: this.accountInfo.personalInfo.securityQuestionID,\n      loginApiResponse: this.uiRouterGlobals.params.loginApiResponse\n    }, { custom: { isExplicitlyAllowedTransition: true } });\n  }\n\n}\n","<main class=\"refresh-2020\">\n    <storefront-utility #storefront></storefront-utility>\n\n    <!--Large Page/Flow title-->\n    <title-banner>\n        {{mfaPageContent.Title}}\n    </title-banner>\n\n    <page-centered-container>\n        <div fxLayout=\"column\">\n            <card-container class=\"u-spacing__firstHeaderToTitle--marginTop\">\n                <section fxLayout=\"column\">\n                    <header>\n                        <h2>{{mfaPageContent.Multi_Factor_Authentication_Title_Text}}</h2>\n                        <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\n                    </header>\n                    <section>\n                        <div class=\"u-spacing__divider--marginTopBottom\"\n                            [innerHTML]=\"mfaPageContent.LongDescription | safeHtml\">\n                        </div>\n                        <div class=\"u-spacing__divider--marginTopBottom\">\n                            {{mfaPageContent.Receive_Verification_Text}}\n                        </div>\n                        <section class=\"contact-section u-spacing__divider--marginTopBottom\">\n                            <label fxLayout=\"row\" [ngClass]=\"{ 'selected':  selectedClass === 'text'}\" for=\"text\"\n                                class=\"border first\">\n                                <input type=\"radio\" id=\"text\" [ngModel]=\"selectedClass\"\n                                    (ngModelChange)=\"selectionChange('text')\" value=\"text\" name=\"contactSelection\"\n                                    checked />\n                                <span fxLayout=\"column\">\n                                    <span class=\"subTitleClass\">{{mfaPageContent.Text_Me_Text}}</span>\n                                    <span class=\"subTitleClass\">{{mfaPageContent.Text_Me_Desc_Text}}</span>\n                                </span>\n                            </label>\n                            <label fxLayout=\"row\" [ngClass]=\"{ 'selected':  selectedClass === 'call'}\" for=\"call\"\n                                class=\"border last\">\n                                <input type=\"radio\" id=\"call\" [ngModel]=\"selectedClass\"\n                                    (ngModelChange)=\"selectionChange('call')\" value=\"call\" name=\"contactSelection\"\n                                    checked />\n                                <span class=\"subTitleClass\">{{mfaPageContent.Automated_Call_Text}}</span>\n                            </label>\n                        </section>\n                        <section class=\"contact-section u-spacing__divider--marginTopBottom\">\n                            <label fxLayout=\"row\" [ngClass]=\"{ 'selected':  selectedClass === 'email'}\" for=\"email\"\n                                class=\"border radius\">\n\n                                <input type=\"radio\" id=\"email\" [ngModel]=\"selectedClass\"\n                                    (ngModelChange)=\"selectionChange('email')\" value=\"email\" name=\"emailSelection\"\n                                    checked />\n                                <span class=\"subTitleClass\">{{mfaPageContent.Email_Me_Text}}</span>\n                            </label>\n                        </section>\n                        <div class=\"u-spacing__divider--marginTopBottom\">\n                            {{(selectedClass === 'email') ? mfaPageContent.Email_Address_Receive_Code :\n                            mfaPageContent.Phone_Number_Rceive_Code}}\n                        </div>\n                        <div *ngIf=\"selectedItems.length>0\" class=\"u-spacing__divider--marginTopBottom\">\n                            <section class=\"contact-section\"\n                            *ngFor=\"let selectedItem of selectedItems; let first = first; let last = last; let i = index\">\n                                    <label fxLayout=\"row\" for=\"{{i}}\" class=\"border\"\n                                        [ngClass]=\"{'last': last, 'first': first, 'radius': selectedItems.length === 1, 'selected': selectedInfo === i}\">\n                                        <input type=\"radio\" [id]=\"i\" [ngModel]=\"selectedInfo\"\n                                        (ngModelChange)=\"receiveCodeChange(selectedItem)\"\n                                            [value]=\"i\" [name]=\"selectedItem.lable\" checked />\n                                        <span class=\"subTitleClass \">{{selectedItem.maskedInfo}}</span>\n                                    </label>\n                            </section>\n                        </div>\n                        <div *ngIf=\"selectedItems.length === 0\">\n                            <span class=\"help-block u-spacing__divider--marginTopBottom\">{{noDataMsg}}</span>\n                        </div>\n                        <a (click)=\"tryAnotherVerification()\">\n                            {{mfaPageContent.Try_Another_Verification_Option}}\n                        </a>\n                    </section>\n                </section>\n            </card-container>\n             \n        </div>\n        <!--Submit Button-->\n        <div class=\"u-spacing__buttonToField--marginTop\" *ngIf=\"selectedItems.length>0\">\n            <action-buttons (main)=\"verify()\"\n                            (alt)=\"cancel()\">\n                <span action-alt>Cancel</span>\n                <span action-main >Verify</span>\n                \n            </action-buttons>\n\n            <wizard-ui #wizardUi></wizard-ui>\n\n\n        </div>\n    </page-centered-container>\n</main>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ENVIRON_CONFIG } from 'common/module';\nimport { DynamicRoutes } from 'app/routing';\nimport { MultiFactorAuthenticationComponent } from './components/multi-factor-authentication.component';\nimport { mfaStateNames } from './constant';\nimport { MultiFactorAuthenticationRoutesStateConfig } from './multi-factor-authentication.routing';\nimport { StorefrontModule } from 'storefront/module';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule as HctraCommonModule } from 'common/module';\n// Refresh imports\nimport { MatDividerModule } from '@angular/material/divider';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { ValidationModule } from 'validation/module';\nimport { PipesModule } from 'pipes/module';\nimport { MultiFactorAuthenticationService } from './services/multi-factor-authentication.service';\nimport { TwoFactorAuthModule } from '2FA/2FA.module';\nimport { MfaVerifyCodeComponent } from './components/mfa-verify-code/mfa-verify-code.component';\nimport { MfaSecurityQuestionComponent } from './components/mfa-security-question/mfa-security-question.component';\n\nconst componentDictionary = {\n  [mfaStateNames.MultiFactorAuthentication]: MultiFactorAuthenticationComponent,\n  [mfaStateNames.VerifyCode]: MfaVerifyCodeComponent,\n  [mfaStateNames.SecurityQuestion]: MfaSecurityQuestionComponent\n};\n\nconst routesWithComponents = MultiFactorAuthenticationRoutesStateConfig.map(route => {\n  const routes = {\n      ...route,\n      component: componentDictionary[route.name]\n  };\n  return routes;\n});\n\n\n@NgModule({\n  declarations: [\n    MultiFactorAuthenticationComponent,\n    MfaVerifyCodeComponent,\n    MfaSecurityQuestionComponent\n  ],\n  imports: [\n    DynamicRoutes([ENVIRON_CONFIG], (environConfig) =>  routesWithComponents),\n    HctraCommonModule, StorefrontModule,\n    MatFormFieldModule, FormsModule,\n    MatDividerModule,\n    FlexLayoutModule,\n    ValidationModule,\n    MatSelectModule,\n    CommonModule,\n    PipesModule,\n    TwoFactorAuthModule\n  ],\n  providers: [MultiFactorAuthenticationService]\n})\nexport class MultiFactorAuthenticationModule { }\n","import { StateConfig } from 'common/interfaces';\r\nimport { AuthResolve, CmsResolve, StateGuard } from 'common/resolvers';\r\nimport { userRoles, webStorageConst } from 'constants/module';\r\nimport { cmsIds, mfaRoutes, mfaStateNames } from './constant';\r\nimport { stateNames as loginStateNames } from 'login/constants';\r\n\r\nexport const stateGuard = StateGuard(webStorageConst.mfaLogin, loginStateNames.Login);\r\n\r\n\r\nexport const MultiFactorAuthenticationRoutesStateConfig: StateConfig[] = [\r\n    {\r\n        name: mfaStateNames.MultiFactorAuthentication,\r\n        url: mfaRoutes.MultiFactorAuthentication,\r\n        resolve: [\r\n            AuthResolve(userRoles.notAuthenticatedMf, userRoles.missingRequiredInformation),\r\n            CmsResolve('mfaPageContent', { ItemId: cmsIds.MFAPageCMS }),\r\n            stateGuard({ denyRefresh: true, allowed: [loginStateNames.Login, mfaStateNames.VerifyCode] })\r\n        ],\r\n        params: {\r\n            loginApiResponse: null\r\n        },\r\n    },\r\n    {\r\n        name: mfaStateNames.VerifyCode,\r\n        url: mfaRoutes.VerifyCode,\r\n        resolve: [\r\n            AuthResolve(userRoles.notAuthenticatedMf, userRoles.missingRequiredInformation),\r\n            CmsResolve('cmsData', { ItemId: cmsIds.VerifyCode }),\r\n            stateGuard({ denyRefresh: true, allowed: [mfaStateNames.MultiFactorAuthentication] })\r\n        ],\r\n        params: {\r\n            phoneNumber: null,\r\n            email: null,\r\n            channel: null,\r\n            acctId: null,\r\n            loginApiResponse: null\r\n        },\r\n    },\r\n    {\r\n        name: mfaStateNames.SecurityQuestion,\r\n        url: mfaRoutes.SecurityQuestion,\r\n        resolve: [\r\n            AuthResolve(userRoles.notAuthenticatedMf, userRoles.missingRequiredInformation),\r\n            CmsResolve('cmsData', { ItemId: cmsIds.SecurityQuestionCMS }),\r\n            stateGuard({ denyRefresh: true, allowed: [mfaStateNames.MultiFactorAuthentication] })\r\n        ],\r\n        params: {\r\n            securityQuestionID: null,\r\n            loginApiResponse: null\r\n        }\r\n    },\r\n];\r\n","import { TwoFactorAuthSendRequest, TwoFactorAuthSendResponse, TwoFactorAuthVerifyRequest, TwoFactorAuthVerifyResponse, ValidateSecurityAnsResponse } from '2FA/interfaces';\nimport { TwoFAService } from '2FA/services/2FA.service';\nimport { Injectable } from '@angular/core';\nimport { StateService } from '@uirouter/angular';\r\nimport { BaseResponse } from 'common/models';\nimport { AccountService, CurrentUserService, GenericRepoService, GetAccountInformationResponse } from 'common/services';\nimport { AuthChannelService } from '../../authentication/authChannelService/authChannel.service';\nimport { AuthenticationService } from '../../authentication/authenticationService/authentication.service';\nimport { UserRoles } from '../../constants/userRoles.constants';\nimport { SuspendedAccountService } from '../../suspendedAccountRefresh/services/suspendedAccount.service';\r\nimport { stateNames as accountDashboardStates } from 'accountDashboard/constants';\r\nimport { AddMissingInformationService } from '../../authentication/addMissingInformationService/addMissingInformation.service';\r\nimport { stateNames as LoginStates } from 'login/constants';\n\n@Injectable()\nexport class MultiFactorAuthenticationService {\n\n    constructor(\n        private accountService: AccountService,\n        private twoFAService: TwoFAService,\n        private genericRepoService: GenericRepoService,\n        private authenticationService: AuthenticationService,\n        private currentUserService: CurrentUserService,\n        private userRoles: UserRoles,\n        private authChannel: AuthChannelService,\n        private suspendedAccountService: SuspendedAccountService,\n        private state: StateService,\n        private addMissingInformationService: AddMissingInformationService,\n    ) { }\n\n    public async authenticateUser(): Promise<any> {\n        const loginResponse = await this.authenticationService.profile({});\n        this.currentUserService.updateCurrentUser(loginResponse);\n        await this.authChannel.logIn(loginResponse);\n    }\n\n    public async getAccountInfo(): Promise<GetAccountInformationResponse> {\n        const accountInfo = await this.accountService.getAccountInformation2fa();\n        return accountInfo;\n    }\n\n    public async sendCode(request: TwoFactorAuthSendRequest): Promise<TwoFactorAuthSendResponse> {\n        return await this.twoFAService.sendVerificationCode(request);\n    }\n\n    public async validateCode(request: TwoFactorAuthVerifyRequest): Promise<TwoFactorAuthVerifyResponse> {\n        return await this.twoFAService.validateVerificationCode(request);\n    }\n\n    public async getSecurityQuestions(): Promise<BaseResponse> {\n        return await this.genericRepoService.dataFactory.getSecurityQuestions();\n    }\n\n    public async verifySecurityQuestionResponse(answer: string): Promise<ValidateSecurityAnsResponse> {\n        return this.twoFAService.validateSecurityAnswer({ answer });\n    }\n\n    public async handleRedirects(loginApiResponse: any) {\n        if (loginApiResponse?.passwordNeedsReset) {\n            this.addMissingInformationService\n                .setMissingInformation(\n                    loginApiResponse.passwordNeedsReset,\n                    loginApiResponse.emailIsMissing,\n                    loginApiResponse.securityQuestionIsMissing);\n\n            await this.state.go(LoginStates.AddMissingInformation);\n        } else if (this.authenticationService.isAuthorized(this.userRoles.suspended)) {\n            await this.suspendedAccountService.getFirstSuspendedAccountState().then(this.state.go);\n        }\n        else {\n            await this.state.go(accountDashboardStates.Frame);\n        }\n    };\n}\n"],"names":["stateNames","i0","ctx_r2","MfaSecurityQuestionComponent","constructor","multiFactorAuthenticationService","uiRouterGlobals","state","authService","responseErrorService","toast","ngOnInit","getSecurityQuestions","then","resp","errors","length","securityQuestionIndex","securityQuestions","findIndex","qus","securityQuestionID","params","securityQuestion","_a","displayErrorsFromResponse","displayAlertsFromResponse","verify","verifySecurityQuestionResponse","answer","authenticateUser","loginApiResponse","handleRedirects","show","cmsData","Success_Msg_Text","cancel","logout","go","Login","selectors","inputs","decls","vars","consts","template","ctx","Channel","mfaStateNames","source","MfaVerifyCodeComponent","cmsReplacementService","mfaService","isEmail","channel","Email","EMAIL_DESC","transformTemplate","email","maskedInfo","PHONE_DESC","phoneNumber","tryAnotherWay","MultiFactorAuthentication","custom","isExplicitlyAllowedTransition","emailKeys","MFATypes","phoneKeys","WindowRef","ctx_r9","ctx_r4","i_r8","selectedItem_r5","ctx_r12","ctx_r14","MultiFactorAuthenticationComponent","webStorageConst","window","TEXT","getAccountInfo","accountInfo","selectionChange","selectedClass","updatedSelection","selectedItems","CALL","phoneArray","formSelectedItem","noDataMsg","mfaPageContent","Phone_Num_Length_Msg","emailArray","_b","Email_Length_Msg","selectedInfo","keys","selection","contactInfo","forEach","key","i","push","id","label","value","EMAIL","getEmailMaskedInfo","slice","splittedMailArr","split","numberOfAsterisk","asteriskString","repeat","receiveCodeChange","val","payload","to","language","localStorage","selectedLanguage","accountId","acctId","Sms","Phone","res","sendCode","VerifyCode","tryAnotherVerification","SecurityQuestion","personalInfo","accountDashboardStates","LoginStates","MultiFactorAuthenticationService","accountService","twoFAService","genericRepoService","authenticationService","currentUserService","userRoles","authChannel","suspendedAccountService","addMissingInformationService","loginResponse","profile","updateCurrentUser","logIn","getAccountInformation2fa","request","sendVerificationCode","validateCode","validateVerificationCode","dataFactory","validateSecurityAnswer","passwordNeedsReset","setMissingInformation","emailIsMissing","securityQuestionIsMissing","AddMissingInformation","isAuthorized","suspended","getFirstSuspendedAccountState","Frame","factory"],"sourceRoot":"webpack:///"}
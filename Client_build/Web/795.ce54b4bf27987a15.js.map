{"version":3,"file":"795.ce54b4bf27987a15.js","mappings":"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","sources":["./src/login/addMissingInformation/addMissingInformation.component.ts","./src/login/addMissingInformation/addMissingInformation.html","./src/login/claimSession/claimSession.component.ts","./src/login/claimSession/claimSession.html","./src/login/login/login.component.ts","./src/login/login/login.html","./src/login/module.ts","./src/login/services/webApi.service.ts"],"sourcesContent":["import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { stateNames as AccountDashboardStates } from 'accountDashboard/constants';\r\nimport { AddMissingInformationService } from 'authentication/addMissingInformationService/addMissingInformation.service';\r\nimport { AuthChannelService } from 'authentication/authChannelService/authChannel.service';\r\nimport { AuthenticationService } from 'authentication/authenticationService/authentication.service';\r\nimport { WindowRef } from 'common/providers';\r\nimport { ResponseErrorService, CurrentUserService, CurrentUser, IsInvoicedService } from 'common/services';\r\nimport { AccountService, AddMissingInformationResponse, SecurityQuestionInfo } from 'common/services/accountService/account.service';\r\nimport { WizardComponent } from 'common/ui';\r\nimport { StateNames as CoreStateNames } from 'constants/stateNames.constants';\r\nimport { UserRoles } from 'constants/userRoles.constants';\r\nimport { MissingInformationFlags } from 'login/interfaces';\r\nimport { SuspendedAccountService } from 'suspendedAccountRefresh/services/suspendedAccount.service';\r\nimport { Alert } from '../../common/interfaces';\r\nimport { PasswordValidationInfo } from 'common/interfaces';\r\nimport { SessionService } from 'common/services/session/session.service';\r\nimport { StorefrontUtilityService } from '../../storefront/services/storefrontUtility.service';\r\n\r\ninterface CmsContent {\r\n    Title: string;\r\n    ShortDescription: string;\r\n    ResetPasswordSectionHeader: string;\r\n    UpdateSecurityQuestionSectionHeader: string;\r\n    UpdateYourEmailSectionHeader: string;\r\n    PopupForClosingTabOrBrowserInIEOnly: string;\r\n}\r\n\r\ninterface MissingInformation {\r\n    currentPassword: string;\r\n    newPassword: string;\r\n    email: string;\r\n    securityAnswer: string;\r\n    securityQuestionID: string;\r\n}\r\n\r\ninterface SaveMissingInformationApiRequest {\r\n    currentPassword: string;\r\n    password: string;\r\n    email: string;\r\n    securityAnswer: string;\r\n    securityQuestionID: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'add-missing-information-component',\r\n    templateUrl: './addMissingInformation.html',\r\n    styleUrls: ['./addMissingInformation.less']\r\n})\r\n\r\nexport class AddMissingInformationComponent implements OnInit {\r\n\r\n    constructor(\r\n        private currentUser: CurrentUserService,\r\n        private responseErrorService: ResponseErrorService,\r\n        private session: SessionService,\r\n        private isInvoicedService: IsInvoicedService,\r\n        @Inject(WindowRef) private window: Window,\r\n        private storefrontUtilityService: StorefrontUtilityService,\r\n        private accountService: AccountService,\r\n        private authChannel: AuthChannelService,\r\n        private addMissingInformationService: AddMissingInformationService,\r\n        private authService: AuthenticationService,\r\n        private suspendedAccountService: SuspendedAccountService,\r\n        private userRoles: UserRoles,\r\n        private state: StateService,\r\n        private coreStateNames: CoreStateNames\r\n    ) { }\r\n\r\n    @Input() cmsContent: CmsContent;\r\n    @Input() pwCmsData: PasswordValidationInfo;\r\n    private currentUserData: CurrentUser;\r\n\r\n    public addMissingInformation: MissingInformation = {\r\n        currentPassword: '',\r\n        newPassword: '',\r\n        securityAnswer: '',\r\n        securityQuestionID: '',\r\n        email: ''\r\n    };\r\n\r\n    public missingInformationFlags: MissingInformationFlags;\r\n    public securityQuestions: SecurityQuestionInfo[];\r\n\r\n    public isShowNewPassword: boolean;\r\n    public isShowCurrentPassword: boolean;\r\n    public isShowSecurityAnswer: boolean;\r\n\r\n    ngOnInit() {\r\n        this.missingInformationFlags = this.addMissingInformationService.returnMissingInformation();\r\n        this.setSecurityQuestions();\r\n\r\n        //Browser popup (if user attempts to close browser while on this page)\r\n        this.window.addEventListener('beforeunload', $event =>\r\n\r\n            //Custom text is not supported by any browsers (except IE) and will not display (except IE).\r\n            //https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\r\n            $event.returnValue = this.cmsContent.PopupForClosingTabOrBrowserInIEOnly\r\n        );\r\n\r\n    }\r\n    private async setSecurityQuestions() {\r\n        const apiResponse = await this.accountService.getSecurityQuestions();\r\n\r\n        if (this.responseErrorService.isErrorFree(apiResponse)) {\r\n            this.securityQuestions = apiResponse.securityQuestions;\r\n        }\r\n    }\r\n\r\n    public async saveInformation(wizardUi: WizardComponent) {\r\n\r\n        const apiRequest: SaveMissingInformationApiRequest = {\r\n            currentPassword: this.addMissingInformation.currentPassword,\r\n            password: this.addMissingInformation.newPassword,\r\n            email: this.addMissingInformation.email,\r\n            securityAnswer: this.addMissingInformation.securityAnswer,\r\n            securityQuestionID: this.addMissingInformation.securityQuestionID\r\n        };\r\n\r\n        const apiResponse: AddMissingInformationResponse = await this.accountService.saveInformation(apiRequest);\r\n\r\n        if (this.responseErrorService.isErrorFree(apiResponse)) {\r\n            this.addMissingInformationService.destroyMissingInformationFlags();\r\n            this.session.create(apiResponse.accountId, apiResponse.accountActivity, null, false);\r\n\r\n\r\n            this.currentUserData = this.currentUser.getCurrentUser() || {};\r\n\r\n            //Set if account invoiced\r\n            this.isInvoicedService.setAccountInvoiced(apiResponse.isInvoiced);\r\n\r\n            this.currentUserData.accountStatus = apiResponse.accountActivity;\r\n            this.currentUserData.acctActivity = apiResponse.accountActivity;\r\n            this.currentUserData.acctId = apiResponse.accountId;\r\n            this.currentUserData.alerts = apiResponse.alerts as [];\r\n            this.currentUserData.emailIsMissing = false;\r\n            this.currentUserData.errors = apiResponse.errors as [];\r\n            this.currentUserData.firstName = apiResponse.firstName;\r\n            this.currentUserData.lastName = apiResponse.lastName;\r\n            this.currentUserData.passwordNeedsReset = false;\r\n            this.currentUserData.securityQuestionIsMissing = false;\r\n            this.currentUserData.sessionTimedOut = apiResponse.sessionTimedOut;\r\n            this.currentUserData.driverLic = apiResponse.driverLic;\r\n            this.currentUserData.driverLicState = apiResponse.driverLicState;\r\n            this.currentUserData.companyName = apiResponse.companyName;\r\n\r\n            await this.authChannel.logIn(this.currentUserData);\r\n\r\n            //Use wizard to allow Kiosk to handle state transitions.\r\n            //Return here as to NOT do state.go() while in Kiosk Mode\r\n            if (this.storefrontUtilityService.isRunningAsKiosk && wizardUi) {\r\n                return wizardUi.gotoNextState();\r\n            }\r\n\r\n            //Use state.go() when NOT in Kiosk Mode\r\n            if (this.authService.isAuthorized(this.userRoles.suspended)) {\r\n                const firstSuspendedAccountState = await this.suspendedAccountService.getFirstSuspendedAccountState();\r\n                await this.state.go(firstSuspendedAccountState);\r\n            } else if (apiResponse.newAccountStep.accountComplete) {\r\n                await this.state.go(AccountDashboardStates.Frame);\r\n            } else {\r\n                await this.state.go(this.coreStateNames.newAccount);\r\n            }\r\n        }\r\n    };\r\n}\r\n","<main class=\"refresh-2020\">\r\n    <title-banner>\r\n        {{cmsContent.Title}}\r\n    </title-banner>\r\n\r\n    <page-centered-container>\r\n        <form #MissingInformationForm=\"ngForm\" validation-focus name=\"MissingInformationForm\"\r\n              fxLayout=\"column\"\r\n              class=\"u-spacing--widthFill\">\r\n            <card-container fxFlexOffset=\"20px\" fxLayout=\"column\">\r\n                <!--DETAILS PARAGRAPH SECTION-->\r\n                <article [innerHtml]=\"cmsContent.ShortDescription\"></article>\r\n\r\n                <!--RESET PASSWORD SECTION-->\r\n                <section *ngIf=\"missingInformationFlags.passwordNeedsReset\"\r\n                         class=\"u-spacing__sectionToSection--marginTop\">\r\n                    <section>\r\n                        <h2>{{cmsContent.ResetPasswordSectionHeader}}</h2>\r\n                        <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                    </section>\r\n\r\n                    <!-- CURRENT PASSWORD INPUT BOX -->\r\n                    <div fxLayout=\"column\"\r\n                         [error-check]=\"currentPasswordInput\">\r\n                        <mat-label for=\"currentPassword\">CURRENT PASSWORD</mat-label>\r\n                        <input type=\"text\"\r\n                               id=\"currentPasswordTxtBox\"\r\n                               [(ngModel)]=\"addMissingInformation.currentPassword\"\r\n                               #currentPasswordInput=\"ngModel\"\r\n                               name=\"currentPassword\"\r\n                               tabindex=\"2\"\r\n                               [type]=\"isShowCurrentPassword ? 'text' : 'password'\"\r\n                               required />\r\n\r\n                        <show-hide-input-button [(showField)]=\"isShowCurrentPassword\"></show-hide-input-button>\r\n\r\n                        <error-messages [errors]=\"currentPasswordInput.errors\" [activeBeforeSubmit]=\"currentPasswordInput.touched\">\r\n                            <error-message rule=\"notEqualTo\">New password must be different from current password.</error-message>\r\n                            <error-message rule=\"required\">Please enter your password</error-message>\r\n                        </error-messages>\r\n                    </div>\r\n\r\n                    <!-- NEW PASSWORD INPUT BOX -->\r\n                    <div fxLayout=\"column\"\r\n                         class=\"u-spacing__fieldToField--marginTop\"\r\n                         [error-check]=\"newPasswordInput\">\r\n                        <mat-label for=\"newPassword\">NEW PASSWORD</mat-label>\r\n                        <input type=\"text\"\r\n                               id=\"newPasswordTxtBox\"\r\n                               [(ngModel)]=\"addMissingInformation.newPassword\"\r\n                               #newPasswordInput=\"ngModel\"\r\n                               name=\"newPassword\"\r\n                               tabindex=\"2\"\r\n                               [type]=\"isShowNewPassword ? 'text' : 'password'\"\r\n                               [notEqualTo]=\"addMissingInformation.currentPassword\"\r\n                               pattern=\"[A-Za-z0-9._!@#$^*&();?{}`~<>,+-]+$\"\r\n                               minlength=\"12\"\r\n                               maxlength=\"50\"\r\n                               required />\r\n\r\n                        <show-hide-input-button [(showField)]=\"isShowNewPassword\"></show-hide-input-button>\r\n                        <span class=\"password-rules\">{{pwCmsData.PasswordDesc}}</span>\r\n\r\n                        <error-messages [errors]=\"newPasswordInput.errors\" [activeBeforeSubmit]=\"newPasswordInput.touched\">\r\n                            <error-message rule=\"required\">Please enter a password-</error-message>\r\n                            <error-message rule=\"minlength\">{{pwCmsData.MinPassword}}</error-message>\r\n                            <error-message rule=\"maxlength\">{{pwCmsData.MaxPassword}}</error-message>\r\n                            <error-message rule=\"pattern\">{{pwCmsData.InvalidCharacter}}</error-message>\r\n                            <error-message rule=\"notEqualTo\">New password must be different from current password.</error-message>\r\n                        </error-messages>\r\n                    </div>\r\n\r\n                </section>\r\n\r\n                <!--UPDATE SECURITY QUESTION SECTION-->\r\n                <section *ngIf=\"missingInformationFlags.securityQuestionIsMissing\"\r\n                         class=\"u-spacing__headerToSection--marginTop\">\r\n                    <section>\r\n                        <h2>{{cmsContent.UpdateSecurityQuestionSectionHeader}}</h2>\r\n                        <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                    </section>\r\n\r\n                    <!--SECURITY QUESTION SELECT DROPDOWN-->\r\n                    <section fxLayout=\"column\" ngClass=\"labelMarginInternal\">\r\n                        <div>\r\n                            <mat-label fxLayout=\"row\"\r\n                                       ngClass=\"labelMargin\">SELECT SECURITY QUESTION</mat-label>\r\n                            <div>\r\n                                <mat-select #SecurityQuestion=\"ngModel\"\r\n                                            name=\"securityQuestions\"\r\n                                            [(ngModel)]='addMissingInformation.securityQuestionID'\r\n                                            id=\"securityQuestions\"\r\n                                            placeholder=\"Please select security question\"\r\n                                            required>\r\n                                    <mat-option *ngFor=\"let question of securityQuestions\" [(value)]=\"question.securityQuestionID\">{{question.securityQuestion}}</mat-option>\r\n                                </mat-select>\r\n                                <error-messages [errors]=\"SecurityQuestion.errors\" [activeBeforeSubmit]=\"SecurityQuestion.touched\">\r\n                                    <error-message rule=\"required\">Please select a new security question</error-message>\r\n                                </error-messages>\r\n                            </div>\r\n                        </div>\r\n                    </section>\r\n\r\n                    <!--SECURITY QUESTION - (USER'S ANSWER) INPUT BOX  -->\r\n                    <section fxLayout=\"column\" ngClass=\"labelMarginInternal\">\r\n                        <div class=\"u-spacing__fieldToField--marginTop\">\r\n                            <mat-label for=\"Answer\"\r\n                                       fxLayout=\"row\"\r\n                                       ngClass=\"labelMargin\">YOUR ANSWER</mat-label>\r\n                            <div>\r\n                                <input #Answer=\"ngModel\"\r\n                                       [type]=\"isShowSecurityAnswer ? 'text' : 'password'\"\r\n                                       fxLayout=\"row\"\r\n                                       id=\"Answer\"\r\n                                       name=\"answer\"\r\n                                       [(value)]=\"addMissingInformation.securityAnswer\"\r\n                                       [(ngModel)]=\"addMissingInformation.securityAnswer\"\r\n                                       pattern=\"^[0-9a-zA-Z?\\.,\\'\\u0022\\s]{1,20}$\"\r\n                                       required\r\n                                       minlength=\"1\"\r\n                                       maxlength=\"20\" />\r\n                                <show-hide-input-button [(showField)]=\"isShowSecurityAnswer\"></show-hide-input-button>\r\n                                <error-messages [errors]=\"Answer.errors\" [activeBeforeSubmit]=\"Answer.touched\">\r\n                                    <error-message rule=\"pattern\">Please enter a valid answer</error-message>\r\n                                    <error-message rule=\"required\">Please enter a valid answer</error-message>\r\n                                    <error-message rule=\"maxlength\">Max. 20 alpha num character</error-message>\r\n                                    <error-message rule=\"minlength\">Min. 1 alpha num character</error-message>\r\n                                </error-messages>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </section>\r\n                </section>\r\n\r\n                <!--UPDATE EMAIL SECTION-->\r\n                <section *ngIf=\"missingInformationFlags.emailIsMissing\"\r\n                         class=\"u-spacing__headerToSection--marginTop\">\r\n                    <section>\r\n                        <h2>{{cmsContent.UpdateYourEmailSectionHeader}}</h2>\r\n                        <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                    </section>\r\n                    <section fxLayout=\"column\"\r\n                             class=\"u-spacing__fieldToField--marginTop\">\r\n                        <email-address [(emailAddress)]=\"addMissingInformation.email\"></email-address>\r\n                    </section>\r\n                </section>\r\n\r\n            </card-container>\r\n\r\n            <!--FORM BUTTONS-->\r\n            <section class=\"u-spacing__buttonToField--marginTop\">\r\n                <action-buttons (main)=\"saveInformation(wizardUi)\">\r\n                    <span action-main>CONTINUE</span>\r\n                </action-buttons>\r\n\r\n                <!--This is only used to handle the states while in KIOSK. It is passed into getLogin() for LOGIN button-->\r\n                <wizard-ui #wizardUi></wizard-ui>\r\n\r\n            </section>\r\n\r\n        </form>\r\n    </page-centered-container>\r\n</main>\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { stateNames as AccountOverviewStates } from 'accountDashboard/constants';\r\nimport { AddMissingInformationService } from 'authentication/addMissingInformationService/addMissingInformation.service';\r\nimport { AuthChannelService } from 'authentication/authChannelService/authChannel.service';\r\nimport { AuthenticationService } from 'authentication/authenticationService/authentication.service';\r\nimport { WindowRef } from 'common/providers';\r\nimport { DialogService, ResponseErrorService } from 'common/services';\r\nimport { EzTagAppRedirectLinkService } from 'common/services/ezTagAppRedirectLinkService/ezTagAppRedirectLink.service';\r\nimport { GenericCmsModalComponent, GenericCmsModalInjectionValues } from 'common/ui';\r\nimport { UserRoles, WebStorageConst } from 'constants/module';\r\nimport { stateNames as HomeStates } from 'home/constants';\r\nimport { stateNames as LoginStates } from 'login/constants';\r\nimport { WebApiService } from 'login/services/webApi.service';\r\nimport { SuspendedAccountService } from 'suspendedAccountRefresh/services/suspendedAccount.service';\r\nimport { FingerprintService } from '../../common/services/fingerprintService/fingerPrintId.service';\r\nimport { WebStorageService } from '../../common/services/webStorageService/webStorage.service';\r\nimport { StringUtilsService, OperatingSystemSnifferService } from 'common/services';\r\n\r\n\r\ninterface CmsContent {\r\n    Title: string;\r\n    ShortDescription: string; //PinExplanation (paragraph under Title)\r\n    PinFormSectionTitle: string;\r\n}\r\n\r\ninterface CmsClaimSessionExpirationModal {\r\n    Title: string;\r\n    ShortDescription: string; //Modal's body text\r\n    AcceptButton: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'claim-session-component',\r\n    templateUrl: './claimSession.html',\r\n    styleUrls: ['./claimSession.less']\r\n})\r\nexport class ClaimSessionComponent implements OnInit {\r\n\r\n    public pin: any;\r\n    public timer: any;\r\n    @Input() cmsContent: CmsContent;\r\n    @Input() cmsClaimSessionExpirationModal: CmsClaimSessionExpirationModal;\r\n\r\n    constructor(\r\n        private responseErrorService: ResponseErrorService,\r\n        private webStorage: WebStorageService,\r\n        private operatingSystemSnifferService: OperatingSystemSnifferService,\r\n        private loginWebApiService: WebApiService,\r\n        private authChannel: AuthChannelService,\r\n        private webStorageConst: WebStorageConst,\r\n        private authService: AuthenticationService,\r\n        private userRoles: UserRoles,\r\n        private state: StateService,\r\n        private suspendedAccountService: SuspendedAccountService,\r\n        private addMissingInformationService: AddMissingInformationService,\r\n        private dialogService: DialogService,\r\n        private ezTagAppRedirectLinkService: EzTagAppRedirectLinkService,\r\n        private fingerprintService: FingerprintService,\r\n        @Inject(WindowRef) private window: Window\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        if (['ios', 'android'].indexOf(this.operatingSystemSnifferService.getOsFull()) < 0) {\r\n            this.state.go(HomeStates.Frame);\r\n            return;\r\n        }\r\n       \r\n        if (this.authService.isAuthenticated()) {\r\n            if (this.state.params.token) {\r\n                this.authService.claimSessionLogOut();\r\n            }\r\n            else {\r\n                this.authService.logout();\r\n            }\r\n        }\r\n\r\n        this.webStorage.setKeyValue(this.webStorageConst.mappSessionBeingUsed, true);\r\n        this.triggerShowExpirationModal();\r\n    }\r\n\r\n    private triggerShowExpirationModal() {\r\n        const expirationDate = new Date(this.state.params.expires).getTime();\r\n        const now = new Date(Date.now()).getTime();\r\n        const timeLeft = isNaN(expirationDate) || now >= expirationDate ? 0 : expirationDate - now;\r\n\r\n        this.timer = setTimeout(() => this.showExpirationModal(), timeLeft);\r\n    }\r\n\r\n    private async showExpirationModal() {\r\n\r\n        const data: GenericCmsModalInjectionValues = {\r\n            cmsContent: {\r\n                Title: this.cmsClaimSessionExpirationModal.Title,\r\n                AcceptBtn: this.cmsClaimSessionExpirationModal.AcceptButton,\r\n                PrimaryContent: this.cmsClaimSessionExpirationModal.ShortDescription\r\n            }\r\n        };\r\n\r\n        await this.dialogService.openGenericModal<GenericCmsModalComponent, GenericCmsModalInjectionValues>(GenericCmsModalComponent, data);\r\n\r\n        try {\r\n            this.returnToApp();\r\n        }\r\n        catch (err) {\r\n            this.state.go(LoginStates.Login);\r\n        }\r\n    }\r\n\r\n    public async submitPinNumber(form: NgForm) {\r\n\r\n        if (!form.valid) { return; }\r\n\r\n        const apiResponse = await this.loginWebApiService.claimSession({\r\n            claimSessionCredential: {\r\n                token: this.state.params.token,\r\n                pin: this.pin\r\n            }\r\n        });\r\n\r\n        if (this.responseErrorService.isErrorFree(apiResponse)) {\r\n            \r\n            const firebaseId = apiResponse?.firebaseId;\r\n\r\n            if (firebaseId) {\r\n                this.fingerprintService.setFingerprintId(firebaseId);\r\n            }\r\n\r\n            const profileResponse = await this.authService.profile({});\r\n\r\n            if (this.responseErrorService.isErrorFree(profileResponse)) {\r\n                await this.redirect(profileResponse);\r\n                clearTimeout(this.timer);\r\n            }\r\n        }\r\n    }\r\n\r\n    private loginInformationIsMissing({ passwordNeedsReset, emailIsMissing, securityQuestionIsMissing }): boolean {\r\n        return this.addMissingInformationService.isMissingInfo(passwordNeedsReset, emailIsMissing, securityQuestionIsMissing);\r\n    };\r\n\r\n    private async redirect(response) {\r\n\r\n        this.authChannel.logIn(response);\r\n\r\n        if (this.loginInformationIsMissing(response)) {\r\n            await this.state.go(LoginStates.AddMissingInformation);\r\n        } else if (this.authService.isAuthorized(this.userRoles.suspended)) {\r\n            const suspendedResponse = await this.suspendedAccountService.getFirstSuspendedAccountState();\r\n            await this.state.go(suspendedResponse);\r\n        } else {\r\n            await this.state.go(AccountOverviewStates.Frame);\r\n        }\r\n    }\r\n\r\n    private returnToApp() {\r\n\r\n        const mobileRedirect = this.ezTagAppRedirectLinkService.getEzTagAppLink();\r\n\r\n        if (mobileRedirect) {\r\n            this.window.location.href = mobileRedirect;\r\n        }\r\n        else {\r\n            this.state.go(LoginStates.Login);\r\n        }\r\n    }\r\n}\r\n","<main class=\"refresh-2020\">\r\n    <title-banner>\r\n        {{cmsContent.Title}}\r\n    </title-banner>\r\n\r\n    <page-centered-container>\r\n        <div fxLayout=\"column\">\r\n            <card-container class=\"u-spacing__firstHeaderToTitle--marginTop\">\r\n                <section fxLayout=\"column\">\r\n\r\n                    <!--Header Section-->\r\n                    <header>\r\n                        <!--Title-->\r\n                        <h2>{{cmsContent.PinFormSectionTitle}}</h2>\r\n                        <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n\r\n                        <!--Details Paragraph (Pin explanation)-->\r\n                        <section>\r\n                            <div [innerHtml]=\"cmsContent.ShortDescription\"></div>\r\n                        </section>\r\n                    </header>\r\n\r\n                    <!--PIN FORM (User Input Field and Submit Button)-->\r\n                    <section [ngClass]=\"cmsContent.ShortDescription ? 'u-spacing__sectionToSection--marginTop' : ''\">\r\n                        <form #ClaimSessionForm=\"ngForm\"\r\n                              validation-focus novalidate\r\n                              fxLayout=\"column start\">\r\n\r\n                            <!-- PIN input box -->\r\n                            <div fxLayout=\"column\"\r\n                                 [error-check]=\"pinInput\">\r\n                                <mat-label for=\"pin\">PLEASE ENTER PIN</mat-label>\r\n                                <input type=\"text\"\r\n                                       id=\"pinTxtBox\"\r\n                                       [(ngModel)]=\"pin\"\r\n                                       #pinInput=\"ngModel\"\r\n                                       name=\"pin\"\r\n                                       tabindex=\"1\"\r\n                                       required />\r\n\r\n                                <aside *ngFor=\"let error of pinInput.errors | keyvalue\">\r\n                                    <ng-container *ngIf=\"ClaimSessionForm.submitted\" [ngSwitch]=\"error.key\">\r\n                                        <p *ngSwitchCase=\"'required'\" class=\"help-block\">Please enter a valid pin</p>\r\n                                    </ng-container>\r\n                                </aside>\r\n                            </div>\r\n\r\n                            <!-- Submit Button -->\r\n                            <div class=\"u-spacing__buttonToField--marginTop\">\r\n\r\n                                <action-buttons (main)=\"submitPinNumber(ClaimSessionForm)\">\r\n                                    <span action-main>SUBMIT</span>\r\n                                </action-buttons>\r\n                            </div>\r\n                        </form>\r\n\r\n                    </section>\r\n                </section>\r\n\r\n            </card-container>\r\n        </div>\r\n    </page-centered-container>\r\n</main>\r\n","import { Component, Inject, Input, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { StateService } from '@uirouter/angular';\r\nimport { stateNames as accountDashboardStates } from 'accountDashboard/constants';\r\nimport { AddMissingInformationService } from 'authentication/addMissingInformationService/addMissingInformation.service';\r\nimport { AuthChannelService } from 'authentication/authChannelService/authChannel.service';\r\nimport { AuthenticateRedirectService } from 'authentication/authenticateRedirectService/authenticateRedirect.service';\r\nimport { AuthenticationService } from 'authentication/authenticationService/authentication.service';\r\nimport { ENVIRON_CONFIG } from 'common/module';\r\nimport { AccountService, CurrentUserService, DialogService, ResponseErrorService, SessionService, WebStorageService } from 'common/services';\r\nimport { GenericCmsModalComponent, GenericCmsModalInjectionValues, WizardComponent } from 'common/ui';\r\nimport { StateNames as CoreStateNames } from 'constants/stateNames.constants';\r\nimport { UserRoles } from 'constants/userRoles.constants';\r\nimport { stateNames as LoginStates } from 'login/constants';\r\nimport { stateNames as ForgotPasswordStates } from 'forgotPassword/constants';\r\nimport { stateNames as FirstTimeLoginStates } from 'firstTimeLogin/constants';\r\nimport { SuspendedAccountService } from 'suspendedAccountRefresh/services/suspendedAccount.service';\r\n\r\nimport { FeaturesStates } from 'shared/states';\r\nimport { CreateAccountNavigateFunction } from 'account/create';\r\nimport { UrlPaths } from 'constants/routes.constants';\r\nimport { StringUtilsService, OperatingSystemSnifferService } from 'common/services';\r\nimport { ForgotUsernameStateNames } from 'forgotUsername/forgotUsername.constants';\r\nimport { StorefrontUtilityService } from '../../storefront/services/storefrontUtility.service';\r\nimport { StorefrontModalService } from '../../storefront/services/modal.service';\r\nimport { mfaStateNames } from 'MFA/constant';\r\n\r\ninterface CmsContent {\r\n    Title: string;\r\n    LoginSectionTitle: string;\r\n    Popups: {\r\n        MAPP_Login_Android: string;\r\n        MAPP_Login_IOS: string;\r\n        MAPP_Login_Other: string;\r\n        MAPP_Login_Browser: string;\r\n        MAPP_Login_Modal_Title: string;\r\n    };\r\n}\r\n\r\n@Component({\r\n    selector: 'login-component',\r\n    templateUrl: './login.html',\r\n    styleUrls: ['./login.less']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n    public enableForgotUsername: boolean;\r\n\r\n    @Input() cmsContent: CmsContent;\r\n\r\n    constructor(\r\n        private responseErrorService: ResponseErrorService,\r\n        private stringUtils: StringUtilsService,\r\n        private operatingSystemSnifferService: OperatingSystemSnifferService,\r\n        private storefrontUtilityService: StorefrontUtilityService,\r\n        private storefrontModalService: StorefrontModalService,\r\n        private authChannel: AuthChannelService,\r\n        private state: StateService,\r\n        private coreStateNames: CoreStateNames,\r\n        private authService: AuthenticationService,\r\n        private addMissingInformationService: AddMissingInformationService,\r\n        private authenticateRedirectService: AuthenticateRedirectService,\r\n        private suspendedAccountService: SuspendedAccountService,\r\n        private userRoles: UserRoles,\r\n        private dialogService: DialogService,\r\n        @Inject(ENVIRON_CONFIG) private environmentConfig,\r\n        private cmsItemId: UrlPaths,\r\n        private currentUserService: CurrentUserService,\r\n        private accntService: AccountService,\r\n        private session: SessionService,\r\n    ) { }\r\n\r\n    async ngOnInit() {\r\n\r\n        //Set Up CMS for showAccountBlockModal().\r\n        //Only set once (in OnInit & nowhere else) to avoid being overwritten if user attempts login from \"blocked\" acct more than 1 time\r\n        const queryString = String(this.cmsContent.Popups);\r\n        this.cmsContent.Popups = {\r\n            MAPP_Login_Modal_Title: this.stringUtils.getUrlParameter('MAPP_Login_Modal_Title', queryString),\r\n            MAPP_Login_Browser: this.stringUtils.getUrlParameter('MAPP_Login_Browser', queryString),\r\n            MAPP_Login_Android: this.stringUtils.getUrlParameter('MAPP_Login_Android', queryString),\r\n            MAPP_Login_IOS: this.stringUtils.getUrlParameter('MAPP_Login_IOS', queryString),\r\n            MAPP_Login_Other: this.stringUtils.getUrlParameter('MAPP_Login_Other', queryString)\r\n        };\r\n\r\n        this.enableForgotUsername = this.environmentConfig.twoFactorAuth.forgotUsername;\r\n\r\n        if (this.session.userRole === this.userRoles.notAuthenticatedMf || this.session.userRole === this.userRoles.missingRequiredInformation) {\r\n            await this.authService.logout();\r\n        }\r\n    }\r\n\r\n    public login = { userName: '', password: '' };\r\n    public isShowPassword = false;\r\n\r\n    public async getLogin(form: NgForm, wizardUi: WizardComponent) {\r\n\r\n        if (form.valid) {\r\n            try {\r\n                const loginApiResponse = await this.authService.login(this.login);\r\n\r\n                if (loginApiResponse && this.responseErrorService.isErrorFree(loginApiResponse)) {\r\n                    await this.handleLoginInformation(loginApiResponse, wizardUi);\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Error will be 'expressAuthenticationFailure'.\r\n                // Only throw error if in Kiosk Mode.\r\n                if (this.storefrontUtilityService.isRunningAsKiosk) {\r\n                    throw e;\r\n                }\r\n                /* Do nothing on error */\r\n            }\r\n        }\r\n    }\r\n\r\n    public async handleLoginInformation(loginApiResponse: any, wizardUi: WizardComponent) {\r\n\r\n        const runningAsNormalWebsiteModeOrKioskFullWebsiteMode = !this.storefrontUtilityService.isRunningAsKiosk\r\n            || (this.storefrontUtilityService.isRunningAsKiosk && this.storefrontUtilityService.webStoreData.fullSiteMode);\r\n\r\n        const isLoginEnabled = this.environmentConfig.twoFactorAuth.enableLogin || false;\r\n\r\n        if (isLoginEnabled && loginApiResponse.passwordNeedsReset && !loginApiResponse.isMfaCompleted) {\r\n            this.currentUserService.updateCurrentUser(loginApiResponse);\r\n            await this.state.go(mfaStateNames.MultiFactorAuthentication, { loginApiResponse }, { custom: { isExplicitlyAllowedTransition: true } });\r\n            return true;\r\n        }\r\n\r\n        const loginInformationIsMissing = this.addMissingInformationService\r\n            .isMissingInfo(\r\n                loginApiResponse.passwordNeedsReset,\r\n                loginApiResponse.emailIsMissing,\r\n                loginApiResponse.securityQuestionIsMissing);\r\n\r\n        if (loginApiResponse.invalidAccountSource) {\r\n            // They have already been logged out by the server\r\n            this.showAccountBlockModal();\r\n            return;\r\n        }\r\n\r\n\r\n        await this.authChannel.logIn(loginApiResponse);\r\n\r\n\r\n        if (loginInformationIsMissing) {\r\n            this.addMissingInformationService\r\n                .setMissingInformation(\r\n                    loginApiResponse.passwordNeedsReset,\r\n                    loginApiResponse.emailIsMissing,\r\n                    loginApiResponse.securityQuestionIsMissing);\r\n\r\n            //Only go to next state if it is NOT in Kiosk mode or if in kiosk full website mode.\r\n            //If we go to next state here while in Kiosk mode, it will not mark this login task as \"complete\"\r\n            //Kiosk will handle the state transitions, so no need to do state.go()\r\n            if (runningAsNormalWebsiteModeOrKioskFullWebsiteMode) {\r\n                await this.state.go(LoginStates.AddMissingInformation);\r\n            }\r\n        }\r\n        else {\r\n            this.responseErrorService.displayAlertsFromResponse(loginApiResponse, true);\r\n\r\n            // Redirect only if it is normal website mode or if in kiosk full website mode.\r\n            // Ignore redirects in Kiosk Mode.\r\n            if (runningAsNormalWebsiteModeOrKioskFullWebsiteMode) {\r\n                await this.handleRedirects(loginApiResponse);\r\n            }\r\n        }\r\n\r\n        //This lets Kiosk go to next work item by completing the login step\r\n        //wizardUi is only used while in Kiosk Mode.\r\n        if (this.storefrontUtilityService.isRunningAsKiosk && !this.storefrontUtilityService.webStoreData.fullSiteMode && wizardUi) {\r\n            if (loginApiResponse.accountStatus === 'PF') {\r\n                await this.storefrontModalService.genericPostSignup(this.cmsItemId.storefrontCashAccountLoginModal);\r\n            }\r\n            else if (loginApiResponse.acctActivity === 'S') {\r\n                await this.storefrontModalService.showVehicalViolationSuspendedAccountMessage();\r\n            }\r\n            else {\r\n                wizardUi.gotoNextState();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async handleRedirects(apiAuthResponse: any) {\r\n        if (this.authService.isAuthorized(this.userRoles.suspended)) {\r\n            await this.suspendedAccountService.getFirstSuspendedAccountState().then(this.state.go);\r\n        } else if (apiAuthResponse.newAccountStep.accountComplete) {\r\n            if (this.authenticateRedirectService.hasSavedState) {\r\n                await this.authenticateRedirectService.redirectLoginAndDeleteSavedState();\r\n            } else {\r\n                const isLoginEnabled = this.environmentConfig.twoFactorAuth.enableLogin || false;\r\n                if (isLoginEnabled && !apiAuthResponse.isMfaCompleted) {\r\n                    await this.state.go(mfaStateNames.MultiFactorAuthentication, { custom: { isExplicitlyAllowedTransition: true } });\r\n                } else {\r\n                    await this.state.go(accountDashboardStates.Frame);\r\n                }\r\n            }\r\n        } else {\r\n            // await this.state.go(this.coreStateNames.newAccount);\r\n            await this.createAcctRoute(apiAuthResponse);\r\n        }\r\n    };\r\n\r\n    public showAccountBlockModal(): void {\r\n        const currentOs = this.operatingSystemSnifferService.getOsFull();\r\n        const currentDevice = this.operatingSystemSnifferService.getDeviceFull();\r\n\r\n        // Defaults to this if the switch case falls through\r\n        let popupMessage = this.cmsContent.Popups.MAPP_Login_Other;\r\n\r\n        switch (currentOs) {\r\n            case 'android':\r\n                popupMessage = this.cmsContent.Popups.MAPP_Login_Android;\r\n                break;\r\n            case 'ios':\r\n                popupMessage = this.cmsContent.Popups.MAPP_Login_IOS;\r\n                break;\r\n            case 'windows':\r\n            case 'macos':\r\n            case 'linux':\r\n                if (currentDevice === 'Unknown') {\r\n                    popupMessage = this.cmsContent.Popups.MAPP_Login_Browser; // desktop browser\r\n                    break;\r\n                }\r\n        }\r\n\r\n        const data: GenericCmsModalInjectionValues = {\r\n            cmsContent: {\r\n                Title: this.cmsContent.Popups.MAPP_Login_Modal_Title,\r\n                AcceptBtn: 'CLOSE',\r\n                PrimaryContent: popupMessage,\r\n                //'Accounts created in the EZ Toll app cannot be used to log into the website'\r\n            }\r\n        };\r\n\r\n        this.dialogService.openGenericModal<GenericCmsModalComponent, GenericCmsModalInjectionValues>(GenericCmsModalComponent, data);\r\n    }\r\n    public async goToForgotPasswordPage() {\r\n\r\n        if (this.storefrontUtilityService.isRunningAsKiosk && !this.storefrontUtilityService.webStoreData.fullSiteMode) {\r\n            const userDone = await this.storefrontModalService.showGotoCsr();\r\n\r\n            if (userDone) {\r\n                await this.state.go(this.coreStateNames.storefrontSurvey);\r\n            }\r\n        }\r\n        else {\r\n            await this.state.go(this.environmentConfig.twoFactorAuth.enableForgotPassword ? ForgotPasswordStates.FindAccount : ForgotPasswordStates.Root);\r\n        }\r\n    }\r\n\r\n    public async goToFirstTimeLoginPage() {\r\n\r\n        const state = this.environmentConfig.twoFactorAuth.enableFirstTimeLogin\r\n            ? FirstTimeLoginStates.FindAccount\r\n            : this.coreStateNames.setupOnlineAccessLoginInfo;\r\n\r\n        await this.state.go(state);\r\n    }\r\n\r\n    public async goToSignUpPage() {\r\n\r\n        if (!this.environmentConfig.createAccountRefresh) {\r\n            await this.state.go(this.coreStateNames.createAccount);\r\n        }\r\n        else {\r\n            await this.state.go(FeaturesStates.Login);\r\n        }\r\n    }\r\n\r\n    private async createAcctRoute(apiAuthResponse?) {\r\n        if (!this.environmentConfig.createAccountRefresh) {\r\n            await this.state.go(this.coreStateNames.createAccount);\r\n        } else {\r\n\r\n            const res = CreateAccountNavigateFunction(apiAuthResponse);\r\n            if (res.isLoginCompleted) {\r\n                if (this.environmentConfig.enableWebCreateAccount2FA) {\r\n                    await this.createAcctTwoFactor(res);\r\n                }\r\n                else {\r\n                    await this.state.go(res.state, { userResumedCreateAcctFlow: true });\r\n                }\r\n            } else {\r\n                await this.state.go(FeaturesStates.Login);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async createAcctTwoFactor(res) {\r\n        if (res.twoFactor && res.twoFactor.authenticate) {\r\n\r\n            await this.state.go(res.twoFactor.routeState, {\r\n                validationSuccessState: res.state,\r\n                acctId: this.currentUserService.getCurrentUser().acctId,\r\n                phoneNumber: (await this.accntService.getContactInfo()).homePhoNbr\r\n\r\n\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    public async goToForgotUsernamePage(): Promise<void> {\r\n        if (this.storefrontUtilityService.isRunningAsKiosk && !this.storefrontUtilityService.webStoreData.fullSiteMode) {\r\n            const userDone = await this.storefrontModalService.showGotoCsr();\r\n\r\n            if (userDone) {\r\n                await this.state.go(this.coreStateNames.storefrontSurvey);\r\n            }\r\n        } else {\r\n            await this.state.go(ForgotUsernameStateNames.InputEmail);\r\n        }\r\n    }\r\n\r\n}\r\n","<main class=\"refresh-2020\">\r\n    <storefront-utility #storefront></storefront-utility>\r\n\r\n    <!--Large Page/Flow title-->\r\n    <title-banner>\r\n        {{cmsContent.Title}}\r\n    </title-banner>\r\n\r\n    <page-centered-container>\r\n        <div fxLayout=\"column\">\r\n            <card-container class=\"u-spacing__firstHeaderToTitle--marginTop\">\r\n                <section fxLayout=\"column\">\r\n                    <!--Smaller title-->\r\n                    <header>\r\n                        <h2>{{cmsContent.LoginSectionTitle}}</h2>\r\n                        <mat-divider class=\"u-spacing__divider--marginTopBottom\"></mat-divider>\r\n                    </header>\r\n\r\n                    <section>\r\n                        <form #LoginForm=\"ngForm\"\r\n                              validation-focus novalidate\r\n                              fxLayout=\"column start\"\r\n                              method=\"post\">\r\n\r\n                            <!-- Username input box -->\r\n                            <div fxLayout=\"column\"\r\n                                 [error-check]=\"usernameInput\">\r\n                                <mat-label for=\"username\">USERNAME</mat-label>\r\n                                <input type=\"text\"\r\n                                       id=\"usernameTxtBox\"\r\n                                       [(ngModel)]=\"login.userName\"\r\n                                       #usernameInput=\"ngModel\"\r\n                                       name=\"username\"\r\n                                       tabindex=\"1\"\r\n                                       required />\r\n\r\n                                <error-messages [errors]=\"usernameInput.errors\" [activeBeforeSubmit]=\"usernameInput.touched\">                    \r\n                                    <error-message rule=\"required\">Please enter your username</error-message>                   \r\n                                </error-messages> \r\n                            </div>\r\n                            \r\n                            <!-- Forgot Username Link -->\r\n                            <ng-container *ngIf=\"enableForgotUsername\">\r\n                                <div class=\"linkSpacing\">\r\n                                    <!--href=\"/ForgotUsername\"-->\r\n                                    <a id=\"forgotUsernameLnk\" (click)=\"goToForgotUsernamePage()\">Forgot Username?</a>\r\n                                </div>\r\n                            </ng-container>\r\n\r\n                            <!-- Password input box -->\r\n                            <div fxLayout=\"column\"\r\n                                 class=\"u-spacing__fieldToField--marginTop\"\r\n                                 ngClass=\"spanPosition\"\r\n                                 [error-check]=\"passwordInput\">\r\n                                <mat-label for=\"password\">PASSWORD</mat-label>\r\n                                <input type=\"text\"\r\n                                       id=\"passwordTxtBox\"\r\n                                       [(ngModel)]=\"login.password\"\r\n                                       #passwordInput=\"ngModel\"\r\n                                       name=\"password\"\r\n                                       tabindex=\"2\"\r\n                                       [type]=\"isShowPassword ? 'text' : 'password'\"\r\n                                       [ngClass]=\"isShowPassword ? 'pwd-hide' : 'pwd-show'\"\r\n                                       required />\r\n\r\n                                <show-hide-input-button [(showField)]=\"isShowPassword\"></show-hide-input-button>\r\n\r\n                                <error-messages [errors]=\"passwordInput.errors\" [activeBeforeSubmit]=\"passwordInput.touched\">                    \r\n                                    <error-message rule=\"required\">Please enter your password</error-message>\r\n                                </error-messages> \r\n                            </div>\r\n\r\n                            <!-- Forgot Password Link -->\r\n                            <div class=\"linkSpacing\">\r\n                                <!--href=\"/ForgotPassword\"-->\r\n                                <a id=\"forgotPasswordLnk\" (click)=\"goToForgotPasswordPage()\">Forgot password?</a>\r\n                            </div>\r\n\r\n                            <!-- Submit Button -->\r\n                            <div class=\"u-spacing__buttonToField--marginTop\">\r\n                                <button class=\"btn u-spacing--widthFill\"\r\n                                        (click)=\"getLogin(LoginForm, wizardUi)\"\r\n                                        tabindex=\"3\">\r\n                                    LOGIN\r\n                                </button>\r\n\r\n                                <!--This is only used to handle the states while in KIOSK. It is passed into getLogin() for LOGIN button-->\r\n                                <wizard-ui #wizardUi></wizard-ui>\r\n                            </div>\r\n                        </form>\r\n\r\n                        <!-- First Time Login link and Sign Up link -->\r\n                        <section *ngIf=\"!storefront.isKioskView\"\r\n                                 id=\"linksSection\"\r\n                                 fxLayout=\"row\"\r\n                                 fxLayoutAlign=\"space-around center\"\r\n                                 class=\"u-spacing__buttonToField--marginTop\"\r\n                                 ngClass.lt-md=\"lt-md\">\r\n\r\n                            <!--FIRST TIME LOGIN LINK-->\r\n                            <a id=\"firstTimeLoginLnk\"\r\n                               ngClass.lt-md=\"lt-md\"\r\n                               (click)=\"goToFirstTimeLoginPage()\">First Time Login?</a>\r\n\r\n                            <!--DIVIDER-->\r\n                            <mat-divider [vertical]=\"true\"\r\n                                         ngClass.lt-md=\"lt-md\"></mat-divider>\r\n\r\n                            <!--SIGN UP LINK-->\r\n                            <a id=\"signUpLnk\"\r\n                               ngClass.lt-md=\"lt-md\"\r\n                               (click)=\"goToSignUpPage()\">Sign Up For EZ TAG</a>\r\n                        </section>\r\n                    </section>\r\n                </section>\r\n\r\n            </card-container>\r\n        </div>\r\n    </page-centered-container>\r\n\r\n</main>\r\n","import { NgModule } from '@angular/core';\r\nimport { UIRouterModule } from '@uirouter/angular';\r\n\r\nimport { environment } from 'environments/environment';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CommonModule as HctraCommonModule } from 'common/module';\r\n\r\nimport { StorefrontModule } from 'storefront/module';\r\nimport { ValidationModule } from 'validation/module';\r\nimport { EzTagAppRedirectLinkService } from 'common/services/ezTagAppRedirectLinkService/ezTagAppRedirectLink.service';\r\n\r\n//components\r\nimport { LoginComponent } from './login/login.component';\r\nimport { AddMissingInformationComponent } from './addMissingInformation/addMissingInformation.component';\r\nimport { ClaimSessionComponent } from './claimSession/claimSession.component';\r\n\r\n// Refresh imports\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n\r\nimport { WebApiService } from './services/webApi.service';\r\n\r\n//other\r\nimport { routes } from 'login/routing';\r\nimport {\r\n    stateNames, urlPaths, StateNames\r\n} from './constants';\r\nexport * from './constants';\r\n\r\nconst routesWithComponents = routes.map(route => {\r\n    const componentDictionary = {\r\n        [stateNames.Login]: LoginComponent,\r\n        [stateNames.AddMissingInformation]: AddMissingInformationComponent,\r\n        [stateNames.ClaimSession]: ClaimSessionComponent,\r\n    };\r\n\r\n    return {\r\n        ...route,\r\n        component: componentDictionary[route.name]\r\n    };\r\n});\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        AddMissingInformationComponent,\r\n        ClaimSessionComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        HctraCommonModule, StorefrontModule,\r\n        UIRouterModule.forChild({ states: routesWithComponents }),\r\n        MatFormFieldModule, FormsModule,\r\n        MatDividerModule,\r\n        FlexLayoutModule,\r\n        ValidationModule,\r\n        MatSelectModule\r\n    ],\r\n    providers: [\r\n        { provide: StateNames, useValue: stateNames },\r\n        EzTagAppRedirectLinkService,\r\n        WebApiService\r\n    ]\r\n})\r\nexport class LoginModule {\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { IClaimSessionResponse } from 'login/interfaces';\r\nimport { HttpService } from '../../common/services/httpService/http.service';\r\n\r\n@Injectable()\r\nexport class WebApiService {\r\n\r\n    constructor(private httpService: HttpService) { }\r\n\r\n    private readonly baseUrl = '/api/sessions/Session';\r\n\r\n    public async claimSession(data: any): Promise<IClaimSessionResponse> {\r\n        const url = `${this.baseUrl}/ClaimSession`;\r\n\r\n        const response: IClaimSessionResponse = await this.httpService.post(url, data);\r\n        return response;\r\n    }\r\n}\r\n"],"names":["stateNames","AccountDashboardStates","WindowRef","i0","ctx_r1","_r5","_r6","_r12","ctx_r2","_r14","AddMissingInformationComponent","constructor","currentUser","responseErrorService","session","isInvoicedService","window","storefrontUtilityService","accountService","authChannel","addMissingInformationService","authService","suspendedAccountService","userRoles","state","coreStateNames","currentPassword","newPassword","securityAnswer","securityQuestionID","email","ngOnInit","missingInformationFlags","returnMissingInformation","setSecurityQuestions","addEventListener","$event","returnValue","cmsContent","PopupForClosingTabOrBrowserInIEOnly","apiResponse","getSecurityQuestions","isErrorFree","securityQuestions","saveInformation","wizardUi","apiRequest","addMissingInformation","password","destroyMissingInformationFlags","create","accountId","accountActivity","currentUserData","getCurrentUser","setAccountInvoiced","isInvoiced","accountStatus","acctActivity","acctId","alerts","emailIsMissing","errors","firstName","lastName","passwordNeedsReset","securityQuestionIsMissing","sessionTimedOut","driverLic","driverLicState","companyName","logIn","isRunningAsKiosk","gotoNextState","isAuthorized","suspended","firstSuspendedAccountState","getFirstSuspendedAccountState","go","newAccountStep","accountComplete","Frame","newAccount","selectors","inputs","pwCmsData","decls","vars","consts","template","ctx","AccountOverviewStates","GenericCmsModalComponent","HomeStates","LoginStates","ClaimSessionComponent","webStorage","operatingSystemSnifferService","loginWebApiService","webStorageConst","dialogService","ezTagAppRedirectLinkService","fingerprintService","indexOf","getOsFull","isAuthenticated","params","token","claimSessionLogOut","logout","setKeyValue","mappSessionBeingUsed","triggerShowExpirationModal","expirationDate","Date","expires","getTime","now","timeLeft","isNaN","timer","setTimeout","showExpirationModal","data","Title","cmsClaimSessionExpirationModal","AcceptBtn","AcceptButton","PrimaryContent","ShortDescription","openGenericModal","returnToApp","err","Login","submitPinNumber","form","valid","claimSession","claimSessionCredential","pin","firebaseId","setFingerprintId","profileResponse","profile","redirect","clearTimeout","loginInformationIsMissing","isMissingInfo","response","AddMissingInformation","suspendedResponse","mobileRedirect","getEzTagAppLink","location","href","accountDashboardStates","ENVIRON_CONFIG","ForgotPasswordStates","FirstTimeLoginStates","FeaturesStates","CreateAccountNavigateFunction","ForgotUsernameStateNames","mfaStateNames","ctx_r7","ctx_r9","ctx_r11","LoginComponent","stringUtils","storefrontModalService","authenticateRedirectService","environmentConfig","cmsItemId","currentUserService","accntService","userName","queryString","String","Popups","MAPP_Login_Modal_Title","getUrlParameter","MAPP_Login_Browser","MAPP_Login_Android","MAPP_Login_IOS","MAPP_Login_Other","enableForgotUsername","twoFactorAuth","forgotUsername","userRole","notAuthenticatedMf","missingRequiredInformation","getLogin","loginApiResponse","login","handleLoginInformation","e","runningAsNormalWebsiteModeOrKioskFullWebsiteMode","webStoreData","fullSiteMode","isLoginEnabled","enableLogin","isMfaCompleted","updateCurrentUser","MultiFactorAuthentication","custom","isExplicitlyAllowedTransition","invalidAccountSource","showAccountBlockModal","setMissingInformation","displayAlertsFromResponse","handleRedirects","genericPostSignup","storefrontCashAccountLoginModal","showVehicalViolationSuspendedAccountMessage","apiAuthResponse","then","hasSavedState","redirectLoginAndDeleteSavedState","createAcctRoute","currentOs","currentDevice","getDeviceFull","popupMessage","goToForgotPasswordPage","userDone","showGotoCsr","storefrontSurvey","enableForgotPassword","FindAccount","Root","goToFirstTimeLoginPage","enableFirstTimeLogin","setupOnlineAccessLoginInfo","goToSignUpPage","createAccountRefresh","createAccount","res","isLoginCompleted","enableWebCreateAccount2FA","createAcctTwoFactor","userResumedCreateAcctFlow","twoFactor","authenticate","routeState","validationSuccessState","phoneNumber","getContactInfo","homePhoNbr","goToForgotUsernamePage","InputEmail","_r2","_r4","WebApiService","httpService","url","baseUrl","post","factory"],"sourceRoot":"webpack:///"}